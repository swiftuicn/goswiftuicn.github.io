<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Fucking SwiftUI Blog</title>
        <link>https://goswiftui.com/blog</link>
        <description>Fucking SwiftUI Blog</description>
        <lastBuildDate>Sat, 16 Mar 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[避免 SwiftUI 任务阻塞 MainActor]]></title>
            <link>https://goswiftui.com/blog/2024/03/16/swiftui-tasks-blocking-the-mainactor</link>
            <guid>https://goswiftui.com/blog/2024/03/16/swiftui-tasks-blocking-the-mainactor</guid>
            <pubDate>Sat, 16 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[我发现很容易不小心阻塞了 MainActor，并且因为一个我以为在后台线程上的长时间运行任务而导致用户界面挂起。使用Swift 并发意味着将长期运行的工作保留在 MainActor 之外。]]></description>
            <content:encoded><![CDATA[<p>我发现很容易不小心阻塞了 MainActor，并且因为一个我以为在后台线程上的长时间运行任务而导致用户界面挂起。这里有一个最近的例子。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="用户界面挂起">用户界面挂起<a href="https://goswiftui.com/blog/2024/03/16/swiftui-tasks-blocking-the-mainactor#%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2%E6%8C%82%E8%B5%B7" class="hash-link" aria-label="用户界面挂起的直接链接" title="用户界面挂起的直接链接">​</a></h3>
<p>Apple 建议不要在<strong>主线程</strong>上运行<strong>长期运行的任务</strong>。阻塞主线程超过<strong>100 毫秒</strong>，用户会注意到无响应或挂起的用户界面。</p>
<p>使用<strong>Swift 并发</strong>意味着将长期运行的工作保留在 <code>MainActor</code> 之外。这是一个我发现很容易犯的错误，尤其是在我开始在代码中散布 <code>@MainActor</code> 以禁止 <a href="https://useyourloaf.com/blog/strict-concurrency-checking-in-swift-packages/" target="_blank" rel="noopener noreferrer">严格并发检查</a> 时。</p>
<p>看看这个带有按钮的 SwiftUI 视图，该按钮会增加计数：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token attribute atrule">@MainActor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> appModel </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">AppModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">VStack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token class-name">Button</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Count"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> appModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">buttonStyle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">borderedProminent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">appModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">counter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">formatted</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">fontDesign</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">monospaced</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">font</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">largeTitle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Running: </span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">appModel</span><span class="token string-literal interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token string-literal interpolation">running </span><span class="token string-literal interpolation operator">?</span><span class="token string-literal interpolation"> </span><span class="token string-literal interpolation string-literal string" style="color:rgb(255, 121, 198)">"Yes"</span><span class="token string-literal interpolation punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token string-literal interpolation"> </span><span class="token string-literal interpolation string-literal string" style="color:rgb(255, 121, 198)">"No"</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">task </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token comment" style="color:rgb(98, 114, 164)">// MainActor 在这里</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> appModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>该视图有一个异步任务，在视图出现之前启动，当它完成时，它会更新下面显示的 <code>running</code> 状态。视图使用的两个方法和值是作为视图的状态属性声明的可观察应用程序模型的一部分。</p>
<p>AppModel 方法是从 <code>MainActor</code> 上的 ContentView 调用的，所以我最终将整个应用程序模型隔离到 <code>MainActor</code>：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token attribute atrule">@MainActor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token attribute atrule">@Observable</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">final</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">AppModel</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">set</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> counter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">set</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> running</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    counter </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// MainActor 在这里</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    running </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">doWork</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">doWork</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// 哪个 actor？</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>start</code> 方法调用另一个异步方法（也在 AppModel 中声明），该方法执行长期运行的工作并返回状态。为了简洁起见，我用 10 秒的延迟替换了实际任务，该任务涉及导入一些数据。</p>
<p>也许你已经看出来了，但这会<strong>挂起用户界面</strong> 10 秒，直到 <code>doWork</code> 方法完成。在这种情况下，<code>doWork</code> 方法在 <code>MainActor</code> 上运行，因为整个 <code>AppModel</code> 都被隔离到 <code>MainActor</code>，我们最终阻塞了用户界面。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="异步和非隔离">异步和非隔离<a href="https://goswiftui.com/blog/2024/03/16/swiftui-tasks-blocking-the-mainactor#%E5%BC%82%E6%AD%A5%E5%92%8C%E9%9D%9E%E9%9A%94%E7%A6%BB" class="hash-link" aria-label="异步和非隔离的直接链接" title="异步和非隔离的直接链接">​</a></h3>
<p>我发现 Apple 关于 <a href="https://developer.apple.com/documentation/xcode/improving-app-responsiveness" target="_blank" rel="noopener noreferrer">提高应用程序响应速度</a> 的这篇文章有助于理解问题和可能的解决方案。</p>
<p>引用要点：</p>
<blockquote>
<p>使用 Swift 并发时，确保不要意外地在 <code>MainActor</code> 上执行工作。将繁重工作重构为非 actor 隔离的异步函数的正确方法取决于你是否可以这样做。</p>
</blockquote>
<p>如果工作是<strong>异步的</strong>，它还需要从 <code>MainActor</code> <strong>非隔离</strong>，如果你不想阻塞用户界面。</p>
<blockquote>
<p>如果你能以这样的方式包装长期运行的工作，使其成为 <code>async</code> 和 <code>nonisolated</code>，那么使用 <code>Task</code> 和 <code>await</code> 在主 actor 之外执行它很容易。</p>
</blockquote>
<blockquote>
<p>如果这不可行，请在调用 <code>Task.</code><a href="https://developer.apple.com/documentation/Swift/Task/detached(priority:operation:)-3lvix" target="_blank" rel="noopener noreferrer"><code>detached(priority:operation:)</code></a> 方法时在同步函数内执行。</p>
</blockquote>
<p>在我的情况下，可以将长期运行的工作与更新 AppModel 状态分开。这意味着我可以通过将 <code>doWork</code> 方法标记为 <code>nonisolated</code> 来解决我的用户界面挂起问题，这样它就不再在 <code>MainActor</code> 上运行：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">nonisolated</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">doWork</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token function" style="color:rgb(80, 250, 123)">sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代�码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="工具帮助">工具帮助？<a href="https://goswiftui.com/blog/2024/03/16/swiftui-tasks-blocking-the-mainactor#%E5%B7%A5%E5%85%B7%E5%B8%AE%E5%8A%A9" class="hash-link" aria-label="工具帮助？的直接链接" title="工具帮助？的直接链接">​</a></h3>
<p>对我来说，这种类型的问题的有趣之处在于它不是编译错误。启用 <a href="https://useyourloaf.com/blog/strict-concurrency-checking-in-swift-packages/" target="_blank" rel="noopener noreferrer">严格并发检查</a> 在这里没有帮助。UI 挂起不是由数据竞争引起的，而是由在主线程上执行了太多工作引起的。这是无意的，但至少对我来说，这似乎是一个很容易犯的错误。</p>
<p><img decoding="async" loading="lazy" src="https://useyourloaf.com/blog/swiftui-tasks-blocking-the-mainactor/001.png" alt="Instruments 严重挂起" class="img_ev3q"></p>
<p>你可以使用 Instruments 中的 Hangs 工具来检查 UI 挂起，但我希望看到 Xcode 帮助我们可视化源代码中发生的事情。例如，用不同的颜色向我展示 Main Actor 上和 Main Actor 外的代码，这样我就可以快速看到问题。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://useyourloaf.com/blog/swiftui-tasks-blocking-the-mainactor/" target="_blank" rel="noopener noreferrer">https://useyourloaf.com/blog/swiftui-tasks-blocking-the-mainactor/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>Concurrency</category>
        </item>
        <item>
            <title><![CDATA[小心使用 SwiftUI 中的 .onTapGesture()]]></title>
            <link>https://goswiftui.com/blog/2024/03/13/be-careful-when-using-ontapgesture</link>
            <guid>https://goswiftui.com/blog/2024/03/13/be-careful-when-using-ontapgesture</guid>
            <pubDate>Wed, 13 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[SwiftUI 使用 .onTapGesture() 修饰符容易变成一个非常糟糕的做法。]]></description>
            <content:encoded><![CDATA[<p>如果你一直在使用 SwiftUI，那么你很可能调用过修饰符 <code>**.onTapGesture()**</code>。
但是，使用此修饰符时要小心，因为它很容易变成一个非常糟糕的做法！</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/10d4fcad-d834-4228-b32c-5ae5536810c9/onTapGesture.001.png" alt="" class="img_ev3q"></p>
<p>此修饰符非常方便，因为它允许你定义一个闭包，当用户点击已附加修饰符的 <code>**View**</code> 时将调用该闭包。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/15712e2b-3850-4f98-85d4-569b3dc561a6/onTapGesture.002.png" alt="" class="img_ev3q"></p>
<p>但是，使用此修饰符时要小心，因为它很容易变成一个非常糟糕的做法！</p>
<p>因此，让我们来看几个用例。</p>
<p>在此第一个用例中，我们使用修饰符 <code>**.onTapGesture()**</code> 在用户点击 <code>**View**</code> 时通过网络开始预取一些数据。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/8bfb6bc3-955f-4538-9208-6423c95da279/onTapGesture.003.png" alt="" class="img_ev3q"></p>
<p>这是修饰符 <code>**.onTapGesture()**</code> 的一个很好的用例，因为它用于触发一个对用户完全透明的操作 👍</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/fe14cf1b-e243-493a-9fa0-04c688c57d73/onTapGesture.gif" alt="" class="img_ev3q"></p>
<p>现在让我们来看第二个用例。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/f3e654f0-79cf-45f7-aedf-a25d14d48894/onTapGesture.005.png" alt="" class="img_ev3q"></p>
<p>在此处，修饰符 <code>**.onTapGesture()**</code> 用于以模态方式显示 <code>**View**</code>。</p>
<p>在此用例中，使用修饰符 <code>**.onTapGesture()**</code> 实际上是一个非常糟糕的做法！</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/85b63bb3-216a-4aeb-9cfa-0a5fbac7f2ea/onTapGesture.gif" alt="" class="img_ev3q"></p>
<p>原因是，以模态方式显示 <code>**View**</code> 是一个面向用户的操作，对于面向用户的操作，使用 <code>**Button**</code> 比使用修饰符 <code>**.onTapGesture()**</code> 更好。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/b2764f3b-0743-4f1c-afe3-738c1164b044/onTapGesture.gif" alt="" class="img_ev3q"></p>
<p>原因是，使用 <code>**Button**</code> 会带来许多理想的副作用。</p>
<p>例如，该操作将对辅助功能层可见，并且该视图将具有一个高亮状态，在用户按下 <code>**Button**</code> 时显示视觉反馈。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/2f7e2037-9953-43ae-9369-c3b55452ac90/onTapGesture.009.png" alt="" class="img_ev3q"></p>
<p>因此请记住，即使调用修饰符而不是将复杂 <code>**View**</code> 包装在 <code>**Button**</code> 中很诱人，但如果你正在实现面向用户的操作，那么你肯定希望使用 <code>**Button**</code>。</p>
<p>本文到此结束，我希望你享受这种新格式！</p>
<p>如果你想尝试一下，这里有代码：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// First Use Case</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">SwiftUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@StateObject</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> viewModel </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">ViewModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">onTapGesture </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">           viewModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">prefetchData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Second Use Case (Bad)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">SwiftUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> showModal </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">sheet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">isPresented</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $showModal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">onTapGesture </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            showModal </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Second Use Case (Good)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">SwiftUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> showModal </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Button</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            showModal </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> label</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">VStack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">sheet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">isPresented</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $showModal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.swiftwithvincent.com/blog/be-careful-when-using-ontapgesture" target="_blank" rel="noopener noreferrer">https://www.swiftwithvincent.com/blog/be-careful-when-using-ontapgesture</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
        </item>
        <item>
            <title><![CDATA[使用 TDD 修复 Swift 中的错误]]></title>
            <link>https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift</link>
            <guid>https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift</guid>
            <pubDate>Wed, 13 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[测试驱动开发 (TDD) 是一种技术，要求你在开始实现解决方案之前先编写一个失败的测试。虽然开发人员在一般开发过程中会使用这种技术，但有一种方法可以仅将其应用于错误修复。]]></description>
            <content:encoded><![CDATA[<p><strong>使用 TDD 修复 Swift 中的错误</strong></p>
<p>测试驱动开发 (TDD) 是一种技术，要求你在开始实现解决方案之前先编写一个失败的测试。虽然开发人员在一般开发过程中会使用这种技术，但有一种方法可以仅将其应用于错误修复。</p>
<p>发现错误已经令人失望，但发现错误再次发生会更糟。防止错误在你修复后再次出现是一项重要的开发技能。</p>
<p>测试驱动开发 (TDD) 流程要求你在开始实现解决方案之前先编写一个失败的测试。你可以使用它来定义新功能的所有规范，并确保不会忘记任何预期结果。</p>
<p>例如，假设有以下文章结构：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Article</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> link</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">URL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们可能希望创建一个新的 <a href="https://www.avanderlee.com/swift/computed-property/" target="_blank" rel="noopener noreferrer">计算属性</a> 来返回这篇文章的博客域。在开始编写实际计算属性之前，我们首先定义以下测试用例：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">testArticleDomain</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> article </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Article</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Async await in Swift explained with code examples"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        author</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        link</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">URL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"https://www.avanderlee.com/swift/async-await/"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">XCTAssertEqual</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">article</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">blogDomain</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"avanderlee.com"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>此代码不会编译，因为 <code>blogDomain</code> 属性不存在。由于我们希望测试首先失败，因此我们可以添加一个返回空字符串的计算属性：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Article</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> blogDomain</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们现在可以成功运行单元测试并得出结论，它确实失败了：</p>
<p><img decoding="async" loading="lazy" src="https://www.avanderlee.com/wp-content/uploads/2024/03/test-driven-development-failing-test.png" alt="使用测试驱动开发，我们首先编写了一个失败的测试。" class="img_ev3q"></p>
<p>使用测试驱动开发，我们首先编写了一个失败的测试。</p>
<p>最后，我们实现实际逻辑，并重新运行测试以确保它成功：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Article</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> blogDomain</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        link</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">host</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">replacingOccurrences</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">of</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"www."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> with</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">??</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>工作流程看起来与许多开发人员所做的事情类似，但主要区别在于从编写测试开始，而不是直接进入功能开发。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tdd-的好处">TDD 的好处<a href="https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift#tdd-%E7%9A%84%E5%A5%BD%E5%A4%84" class="hash-link" aria-label="TDD 的好处的直接链接" title="TDD 的好处的直接链接">​</a></h3>
<p>开发人员往往犹豫在工作流程中开始使用测试驱动开发。编写一个失败的测试感觉多余，而且浪费时间。在我开始列出 TDD 的一些好处之前，我认为强调一下这一点很重要：当它适合你的当前任务时，你可以将此技术用作选择加入的工具集。</p>
<p>我在解决错误时偶尔会使用它，因为我想清除我对预期结果的思考。通过编写测试，你可以确保记住所有边缘情况和预期结果。其次，你将使自己能够完全专注于开发解决方案，而无需不断考虑必须支持的结果：你可以运行测试，并且知道当所有测试都成功时就完成了。</p>
<p>首先编写失败测试的另一个好处是确保你的测试实际上会失败。这听起来很愚蠢，但我看到许多测试即使实现发生变化也会始终成功。换句话说，测试不会捕获任何错误的实现。</p>
<p>最后，通过从测试开始，你将确保你的新代码从一开始就可以进行测试。当你编写没有考虑测试的新代码时，事后编写测试可能会更具挑战性。由于它变得更加困难，因此更容易完全跳过编写测试，从而导致测试覆盖率降低。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用测试解决错误的双赢">使用测试解决错误的双赢<a href="https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift#%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95%E8%A7%A3%E5%86%B3%E9%94%99%E8%AF%AF%E7%9A%84%E5%8F%8C%E8%B5%A2" class="hash-link" aria-label="使用测试解决错误的双赢的直接链接" title="使用测试解决错误的双赢的直接链接">​</a></h2>
<p>我开始撰写有关测试驱动开发的主要原因是我在解决错误时主要使用它。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用测试而不是手动交互来重现错误">使用测试而不是手动交互来重现错误<a href="https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift#%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95%E8%80%8C%E4%B8%8D%E6%98%AF%E6%89%8B%E5%8A%A8%E4%BA%A4%E4%BA%92%E6%9D%A5%E9%87%8D%E7%8E%B0%E9%94%99%E8%AF%AF" class="hash-link" aria-label="使用测试而不是手动交互来重现错误的直接链接" title="使用测试而不是手动交互来重现错误的直接链接">​</a></h3>
<p>当我开始解决错误时，我首先想知道如何重现它。你可能做的第一件事是打开你的应用程序并开始四处导航。然而，根据我的经验，查看特定代码并使用与错误报告中所述类似的输入编写测试要容易得多。理想情况下，你将有足够的日志（例如，通过使用 <a href="https://www.avanderlee.com/workflow/fixing-crashes-bugs/" target="_blank" rel="noopener noreferrer">Diagnostics</a>）来了解导致错误的原因。如果没有，你可以阅读特定代码行并使用测试来查找触发器。</p>
<p>编写测试的另一个好处是，你可能会更好地理解错误的原因。如果你能够更快地解决错误，我不会感到惊讶。因此，TDD 与错误修复配合得很好。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用就位的测试解决错误">使用就位的测试解决错误<a href="https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift#%E4%BD%BF%E7%94%A8%E5%B0%B1%E4%BD%8D%E7%9A%84%E6%B5%8B%E8%AF%95%E8%A7%A3%E5%86%B3%E9%94%99%E8%AF%AF" class="hash-link" aria-label="使用就位的测试解决错误的直接链接" title="使用就位的测试解决错误的直接链接">​</a></h3>
<p>一旦你有了测试，你就可以开始解决错误。根据错误的不同，这可能具有挑战性且耗时。有一种方法可以快速验证你的解决方案可以极大地缩短修复时间。你不必手动执行各种步骤，而是可以简单地重新运行测试并进行验证。</p>
<p>我看到开发人员使用手动应用程序交互来解决错误，他们甚至无法在第一时间持续重现错误。换句话说，凭一点运气，你认为自己解决了错误，但实际上并没有。在你认为修复是可靠的之前，必须有一个持续的重现。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="更高的代码覆盖率和更高的信心">更高的代码覆盖率和更高的信心<a href="https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift#%E6%9B%B4%E9%AB%98%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E6%9B%B4%E9%AB%98%E7%9A%84%E4%BF%A1%E5%BF%83" class="hash-link" aria-label="更高的代码覆盖率和更高的信心的直接链接" title="更高的代码覆盖率和更高的信心的直接链接">​</a></h3>
<p>一旦你解决了错误，你便同时实现了新测试并提高了代码覆盖率。你还可以对你的代码库更有信心，因为你已经确保错误无法在不使你的测试失败的情况下返回。代码库信心不容小觑，对于希望定期向大量受众发布更新的应用程序至关重要。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a href="https://goswiftui.com/blog/2024/03/13/test-driven-development-tdd-for-bug-fixes-in-swift#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="结论的直接链接" title="结论的直接链接">​</a></h3>
<p>测试驱动开发是一种通过同时提高测试代码覆盖率和代码质量来提高代码质量的出色技术。一开始编写失败的测试可能很乏味，但结果将是一个更完整的特性实现，涵盖所有预期结果。当与错误修复结合使用时，你将提高你的信心，并确保错误不会在将来再次出现。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.avanderlee.com/workflow/test-driven-development-tdd-for-bug-fixes-in-swift/" target="_blank" rel="noopener noreferrer">https://www.avanderlee.com/workflow/test-driven-development-tdd-for-bug-fixes-in-swift/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>swift</category>
            <category>TDD</category>
        </item>
        <item>
            <title><![CDATA[关于Swift 5.1你需要知道的内容]]></title>
            <link>https://goswiftui.com/blog/2024/03/09/everything-you-need-to-know-about-swift-5-10</link>
            <guid>https://goswiftui.com/blog/2024/03/09/everything-you-need-to-know-about-swift-5-10</guid>
            <pubDate>Sat, 09 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[：Swift 5.1 改进了 Sendable 和 actor 隔离检查，以进一步消除数据竞速。此外，还添加了一些新的并发性 API，以使开发人员更容易编写正确的并发代码。]]></description>
            <content:encoded><![CDATA[<p>期待已久的 iOS 17.4 和 iPadOS 17.4 刚刚发布，这意味着如果你是一位欧盟 iOS 用户，我们可能会逐渐开始看到其他应用商店出现。除了 17.4 版本外，Apple 还发布了 Xcode 15.3 和 Swift 5.10。</p>
<p>Swift 5.10 中包含的提案数量并不多，但这并不会让此版本显得不那么重要。</p>
<p>借助 Swift 5.10，Apple 设法弥补了 Swift 并发数据安全功能中存在的一些重大差距。简而言之，这意味着编译器将能够通过在更多地方强制执行 actor 隔离和可发送性来捕获更多可能的线程安全问题。</p>
<p>我们来看看实现此功能的两个特性。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="增强的并发性检查">增强的并发性检查<a href="https://goswiftui.com/blog/2024/03/09/everything-you-need-to-know-about-swift-5-10#%E5%A2%9E%E5%BC%BA%E7%9A%84%E5%B9%B6%E5%8F%91%E6%80%A7%E6%A3%80%E6%9F%A5" class="hash-link" aria-label="增强的并发性检查的直接链接" title="增强的并发性检查的直接链接">​</a></h2>
<p>我之前写过有关 <a href="https://www.donnywals.com/enabling-concurrency-warnings-in-xcode-15/" target="_blank" rel="noopener noreferrer">严格并发性检查</a> 的文章，但当时你的代码仍然有一些可能不安全的方式，而编译器不会注意到。在 Swift 5.10 中，Apple 修补了这些情况，现在编译器将在严格并发模式下正确标记所有不安全的代码。</p>
<p>当然，这排除了你已标记为 <code>nonisolated(unsafe)</code> 或 <code>@unchecked Sendable</code> 的代码，因为这两个标记都表示代码 <em>应该</em>是安全的，但编译器无法检查这一点。</p>
<p>如果你已使用严格并发性检查并已解决所有警告（如果你做到了，向你致敬！这并不简单），那么 Swift 5.10 可能会标记你可能错过的某些极端情况。</p>
<p>在我看来，更好的编译时检查以防止数据竞争是对该语言的受欢迎改进，我迫不及待地想看看 Apple 在不久的将来会对严格并发性检查做出哪些其他改进。目前有一些提案旨在解决严格并发性检查的可用性，在我看来这是一件非常好的事情。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="se-0412-全局变量的严格并发性">SE-0412 全局变量的严格并发性<a href="https://goswiftui.com/blog/2024/03/09/everything-you-need-to-know-about-swift-5-10#se-0412-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%A5%E6%A0%BC%E5%B9%B6%E5%8F%91%E6%80%A7" class="hash-link" aria-label="SE-0412 全局变量的严格并发性的直接链接" title="SE-0412 全局变量的严格并发性的直接链接">​</a></h2>
<p>提案 SE-0412 已进入 Swift 5.10，它进一步增强了 Swift 在编译时防止数据竞争的能力。</p>
<p>当你编写涉及共享状态的代码时，如果你不确保此共享状态可以跨线程安全使用，那么你就会让自己面临来自许多位置的数据竞争。</p>
<p>在 Swift 5.10 中，只有在以下情况下，编译器才会允许你从并发上下文访问共享的可变状态：</p>
<ul>
<li>此状态不可变且可发送（<a href="https://www.donnywals.com/what-are-sendable-and-sendable-closures-in-swift/" target="_blank" rel="noopener noreferrer">在此处了解有关可发送的更多信息</a>)</li>
<li>此状态隔离到全局 actor（如 <code>@MainActor</code> 或你编写的 actor）</li>
</ul>
<p>在任何其他情况下，编译器都会认为从并发上下文中访问共享状态是不安全的。</p>
<p>如果你采取了规避 Swift 并发的 actor 和可发送性的措施（例如，因为你正在使用 Semaphore 或 DispatchQueue 来同步访问的旧代码），你可以通过将全局变量标记为 <code>nonisolated(unsafe)</code> 来选择退出并发性检查。此标记将告诉编译器它不需要对标记的属性执行任何安全检查；你已确保代码可以安全地从并发上下文中使用。</p>
<p>将属性标记为 <code>nonisolated(unsafe)</code> 很像强制解包属性。你可能确信你的代码是安全的并且会按预期工作，但你只能依靠自己。你已告诉编译器你了解自己在做什么，并且不需要编译器为你执行任何检查。</p>
<p>每当你想要使用 <code>nonisolated(unsafe)</code> 时，你都应该始终问问自己，是否可以实际将你正在标记的类型隔离到全局 actor，或者也许你可以将属性的类型设为 <code>Sendable</code> 和不可变。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="https://goswiftui.com/blog/2024/03/09/everything-you-need-to-know-about-swift-5-10#%E6%80%BB%E7%BB%93" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2>
<p>Swift 5.10 是对该语言非常受欢迎的改进，它使 Swift 并发比 Swift 5.9 中的并发稍微更可靠。Swift 6.0 正在逐渐开发中，我认为当 Apple 宣布 iOS 18、Xcode 16.0 等时，我们会在 6 月左右看到第一个 Swift 6.0 测试版。</p>
<p>我很高兴看到 Apple 致力于并发，并在每次发布中进行（有时是急需的）改进，在我看来，Swift 5.10 是在为我们的异步代码实现编译时安全性方面的一个极好的里程碑。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.donnywals.com/everything-you-need-to-know-about-swift-5-10/" target="_blank" rel="noopener noreferrer">https://www.donnywals.com/everything-you-need-to-know-about-swift-5-10/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>swift</category>
        </item>
        <item>
            <title><![CDATA[Swift 中的可选类型详解：你需要知道的 5 件事]]></title>
            <link>https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know</link>
            <guid>https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know</guid>
            <pubDate>Thu, 07 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[可选类型是 Swift 的核心，自 Swift 的第一个版本以来就已存在。可选值允许我们编写简洁的代码，同时处理可能的 nil 值。]]></description>
            <content:encoded><![CDATA[<p><strong>Swift 中的可选类型详解：你需要知道的 5 件事</strong></p>
<p>可选类型是 Swift 的核心，自 Swift 的第一个版本以来就已存在。可选值允许我们编写简洁的代码，同时处理可能的 nil 值。</p>
<p>如果你刚接触 Swift，你应该习惯在属性中添加问号的语法。一旦你习惯了它们，你就可以开始从它们中受益，例如使用扩展。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是-swift-中的可选值">什么是 Swift 中的可选值？<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E4%BB%80%E4%B9%88%E6%98%AF-swift-%E4%B8%AD%E7%9A%84%E5%8F%AF%E9%80%89%E5%80%BC" class="hash-link" aria-label="什么是 Swift 中的可选值？的直接链接" title="什么是 Swift 中的可选值？的直接链接">​</a></h2>
<p>在我们深入了解你应该知道的知识点列表之前，首先了解基础知识很重要。</p>
<p>属性、方法和下标可以返回一个可选类型，这基本上意味着它要么返回一个值（如果存在），要么返回 <code>nil</code>。可以将多个查询链接在一起，这称为“可选链式”。这是“强制解包”的替代方法，稍后将对此进行更详细的解释。</p>
<p>以下代码示例定义了一个可选的 <code>String</code>，并使用链式打印字符数。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count </span><span class="token operator">??</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>注意：稍后将解释 ?? 运算符（空合并运算符）。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-强制解包-swift-中的可选类型">1. 强制解包 Swift 中的可选类型<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#1-%E5%BC%BA%E5%88%B6%E8%A7%A3%E5%8C%85-swift-%E4%B8%AD%E7%9A%84%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="1. 强制解包 Swift 中的可选类型的直接链接" title="1. 强制解包 Swift 中的可选类型的直接链接">​</a></h2>
<p>强制解包要么返回存在的值，要么在值是 <code>nil</code> 时触发运行时错误。</p>
<p>但在我们深入了解强制解包之前，让我们先了解一下不使用强制解包的解包可能性。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何解包一个可选类型">如何解包一个可选类型？<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%8C%85%E4%B8%80%E4%B8%AA%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="如何解包一个可选类型？的直接链接" title="如何解包一个可选类型？的直接链接">​</a></h3>
<p>有许多方法可以在 Swift 中解包一个值。你可以使用 guard 语句：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">guard</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> unwrappedName </span><span class="token operator">=</span><span class="token plain"> name </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">unwrappedName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>或者你可以使用 if let 语句：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> unwrappedName </span><span class="token operator">=</span><span class="token plain"> name </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">unwrappedName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>自 <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0345-if-let-shorthand.md" target="_blank" rel="noopener noreferrer">SE-0345</a> 以来，我们还可以使用简写语法来解包同名属性：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>或者你可以使用双问号运算符，也称为空合并运算符。这将返回可选值（如果存在）或默认值，在本例中定义为零：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count </span><span class="token operator">??</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用感叹号--强制解包">使用感叹号 (!) 强制解包<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%B9%E5%8F%B7--%E5%BC%BA%E5%88%B6%E8%A7%A3%E5%8C%85" class="hash-link" aria-label="使用感叹号 (!) 强制解包的直接链接" title="使用感叹号 (!) 强制解包的直接链接">​</a></h2>
<p>可以使用值后直接的感叹号 (!) 强制解包一个可选类型：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果上述示例中的 name 变量被设置为 <code>nil</code>，它将导致以下致命运行时错误：</p>
<blockquote>
<p>致命错误：意外发现 nil，同时解包一个可选值</p>
</blockquote>
<p>因此，意识到你处于控制之中并且通过使用强制解包冒着崩溃的风险非常重要。根据我的经验，如果可能的话，最好不要使用强制解包。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="解包可以链接">解包可以链接<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E8%A7%A3%E5%8C%85%E5%8F%AF%E4%BB%A5%E9%93%BE%E6%8E%A5" class="hash-link" aria-label="解包可以链接的直接链接" title="解包可以链接的直接链接">​</a></h2>
<p>可选链式可以这样完成：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Learning everything about optionals"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">post</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count </span><span class="token operator">??</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>强制解包也是如此：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Learning everything about optionals"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">post</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>但请注意，如果你只解包最后一个可选类型，你仍然会得到一个可选类型。在以下示例中，我们只解包 title，而不解包 post。这意味着如果 post 是 <code>nil</code>，我们仍然无法获得 title：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> post</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Learning everything about optionals"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">post</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印：Optional(35)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="可选类型作为最佳实践强制解包以捕获编程错误">可选类型作为最佳实践，强制解包以捕获编程错误<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E5%BC%BA%E5%88%B6%E8%A7%A3%E5%8C%85%E4%BB%A5%E6%8D%95%E8%8E%B7%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF" class="hash-link" aria-label="可选类型作为最佳实践，强制解包以捕获编程错误的直接链接" title="可选类型作为最佳实践，强制解包以捕获编程错误的直接链接">​</a></h3>
<p>最好不要在不需要时使用感叹号。有些人甚至建议启用 <a href="https://github.com/realm/SwiftLint/blob/master/Source/SwiftLintFramework/Rules/Idiomatic/ForceUnwrappingRule.swift" target="_blank" rel="noopener noreferrer">强制解包 SwiftLint 规则</a>。这将防止你引入许多意外崩溃。</p>
<p>但是，一些开发人员更喜欢在值是 <code>nil</code> 时使用强制解包，因为这是一个编程错误。因此，你可以通过强制解包和在早期阶段捕获错误来帮助自己进行调试。我的偏好是尽量不使用强制解包。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-可选类型是一个包含两个案例的枚举">2. 可选类型是一个包含两个案例的枚举<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#2-%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E4%B8%A4%E4%B8%AA%E6%A1%88%E4%BE%8B%E7%9A%84%E6%9E%9A%E4%B8%BE" class="hash-link" aria-label="2. 可选类型是一个包含两个案例的枚举的直接链接" title="2. 可选类型是一个包含两个案例的枚举的直接链接">​</a></h2>
<p>很高兴知道可选类型基本上是一个包含两个案例的枚举：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token operator">&lt;</span><span class="token class-name">Wrapped</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 值的缺失。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">none</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 值的存在，存储为 `Wrapped`。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">Wrapped</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>但是，你将使用 <code>nil</code> 来表示值的缺失，而不是使用 <code>.none</code> 案例。</p>
<p>考虑到这一点，你可以使用枚举来定义上述 name 变量：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> name </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>或者你可以像使用普通枚举一样使用 switch-case：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">printName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token omit keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> name </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> unwrappedValue</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Name is </span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">unwrappedValue</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">none</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Name is nil"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">printName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token nil constant" style="color:rgb(189, 147, 249)">nil</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Name is nil"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">printName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Name is Antoine van der Lee"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>并且查看其 <a href="https://developer.apple.com/documentation/swift/optional" target="_blank" rel="noopener noreferrer">文档</a>，你可以看到可选类型附带了一些非常方便的方法。一个很好的例子是 <code>map</code> 方法：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> sideLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"20"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> possibleSquare </span><span class="token operator">=</span><span class="token plain"> sideLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">map </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token short-argument">$0</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token short-argument">$0</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">possibleSquare</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Optional(400)"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>或者 <code>flatMap</code> 方法，在本例中，它仅在名称通过至少包含 5 个字符的验证后才返回名称：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> validName </span><span class="token operator">=</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">flatMap </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> name </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">guard</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token nil constant" style="color:rgb(189, 147, 249)">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> name</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">validName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Optional("Antoine van der Lee")"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>如果你想了解更多有关 map、flatMap 和 compactMap 之间差异的信息，请查看我的博客文章：</em> <a href="https://www.avanderlee.com/swift/compactmap-flatmap-differences-explained/" target="_blank" rel="noopener noreferrer">CompactMap 与 flatMap：差异详解</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="扩展可选类型">扩展可选类型<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E6%89%A9%E5%B1%95%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="扩展可选类型的�直接链接" title="扩展可选类型的直接链接">​</a></h3>
<p>既然你知道可选类型被定义为一个枚举；你还可以为它编写扩展！</p>
<p>最常见的示例是扩展一个可选的 String 并处理一个空值：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Optional</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">where</span><span class="token plain"> </span><span class="token class-name">Wrapped</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> orEmpty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token plain"> </span><span class="token operator">??</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">orEmpty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">name </span><span class="token operator">=</span><span class="token plain"> </span><span class="token nil constant" style="color:rgb(189, 147, 249)">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">orEmpty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印：""</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>虽然我们使用枚举来定义扩展，但我们也可以使用以下语法，使用问号：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> orEmpty</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token plain"> </span><span class="token operator">??</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-为可选类型编写单元测试">3. 为可选类型编写单元测试<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#3-%E4%B8%BA%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B%E7%BC%96%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="3. 为可选类型编写单元测试的直接链接" title="3. 为可选类型编写单元测试的直接链接">​</a></h2>
<p>当你编写测试时，有一种很好的方法可以在不强制解包的情况下使用可选类型。如果你使用强制解包，你冒着导致所有测试无法成功的致命错误的风险。</p>
<p>你可以使用 <code>XCTUnwrap</code>，如果值为 <code>nil</code>，它将抛出一个错误：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">testBlogPostTitle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">throws</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> blogPost</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">BlogPost</span><span class="token operator">?</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">fetchSampleBlogPost</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> unwrappedTitle </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token class-name">XCTUnwrap</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">blogPost</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Title should be set"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">XCTAssertEqual</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">unwrappedTitle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Learning everything about optionals"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-可选协议方法">4. 可选协议方法<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#4-%E5%8F%AF%E9%80%89%E5%8D%8F%E8%AE%AE%E6%96%B9%E6%B3%95" class="hash-link" aria-label="4. 可选协议方法的直接链接" title="4. 可选协议方法的直接链接">​</a></h2>
<p>如果你有 Objective-C 的经验，你可能会错过可选协议方法。尽管在 Swift 中有一种更好的方法来模仿这种行为，使用默认协议实现，但标准库中的常见方式如下所示：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token attribute atrule">@objc</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">protocol</span><span class="token plain"> </span><span class="token class-name">UITableViewDataSource</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NSObjectProtocol</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@objc</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">optional</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">numberOfSections</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> tableView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">UITableView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这允许你使用问号调用该方法：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> tableView </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">UITableView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> numberOfSections </span><span class="token operator">=</span><span class="token plain"> tableView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">dataSource</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">numberOfSections</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> tableView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你可以在此处阅读有关协议方法的更多信息：<a href="https://www.avanderlee.com/swift/optional-protocol-methods/" target="_blank" rel="noopener noreferrer">Swift 中的可选协议方法</a>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-嵌套可选类型是一件小事">5. 嵌套可选类型是一件小事<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#5-%E5%B5%8C%E5%A5%97%E5%8F%AF%E9%80%89%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B" class="hash-link" aria-label="5. 嵌套可选类型是一件小事的直接链接" title="5. 嵌套可选类型是一件小事的直接链接">​</a></h2>
<p>尽管 <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0230-flatten-optional-try.md" target="_blank" rel="noopener noreferrer">SE-0230 – 扁平化由“try?”产生的嵌套可选类型</a> 删除了嵌套可选类型最常见的原因之一，但它仍然是一件小事！</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">??</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token operator">!!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你已经解包了一个仍然返回一个可选类型的可选类型。这曾经是早期 Swift 版本中使用 <code>try?</code> 运算符时的情况。</p>
<p>一个常见的示例是当你使用包含可选值的字典时：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> nameAndAges</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">28</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> antoinesAge </span><span class="token operator">=</span><span class="token plain"> nameAndAges</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">antoinesAge</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Optional(Optional(28))"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">antoinesAge</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："Optional(28)"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">antoinesAge</span><span class="token operator">!!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 打印："28"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你可以看到，它基本上只需要使用额外的感叹号或问号。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a href="https://goswiftui.com/blog/2024/03/07/optionals-in-swift-explained-5-things-you-should-know#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="结论的直接链接" title="结论的直接链接">​</a></h3>
<p>就是这样！我们介绍了在 Swift 中使用可选类型时需要了解的许多内容。从使用感叹号 (!!) 的基本解包到扩展 Optional 枚举的更高级实现。</p>
<p>如果你想进一步提高你的 Swift 知识，请查看 <a href="https://www.avanderlee.com/category/swift/" target="_blank" rel="noopener noreferrer">Swift 类别页面</a>。如果你有任何其他提示或反馈，请随时 <a href="mailto:contact@avanderlee.com" target="_blank" rel="noopener noreferrer">联系我</a> 或在 <a href="https://www.twitter.com/twannl" target="_blank" rel="noopener noreferrer">Twitter</a> 上给我发推文。</p>
<p>谢谢！</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.avanderlee.com/swift/optionals-in-swift-explained-5-things-you-should-know/" target="_blank" rel="noopener noreferrer">https://www.avanderlee.com/swift/optionals-in-swift-explained-5-things-you-should-know/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>swift</category>
        </item>
        <item>
            <title><![CDATA[使用高级描述在 Swift 中定义自定义错误]]></title>
            <link>https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift</link>
            <guid>https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift</guid>
            <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Swift 提供了一种强大的机制来定义我们自己的自定义错误，从而可以更好地处理错误，并在我们的应用程序中创建更具信息性和用户友好的错误。当我们旨在增强基于 Swift 的项目的健壮性和可用性时，此功能至关重要。通过编写适当的自定义错误，我们可以清晰准确地指导用户，从而显著改善整体用户体验。]]></description>
            <content:encoded><![CDATA[<p>Swift 提供了一种强大的机制来定义我们自己的自定义错误，从而可以更好地处理错误，并在我们的应用程序中创建更具信息性和用户友好的错误。当我们旨在增强基于 Swift 的项目的健壮性和可用性时，此功能至关重要。通过编写适当的自定义错误，我们可以清晰准确地指导用户，从而显著改善整体用户体验。</p>
<p>在这篇文章中，我们将深入探讨在 Swift 中定义自定义错误的基本知识，探索特定方面并了解一些鲜为人知但非常有价值的 API。通过实际示例和详细解释，你将获得知识，让你编写出更可靠、对用户更直观的软件。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建自定义错误类型">创建自定义错误类型<a href="https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="创建自定义错误类型的直接链接" title="创建自定义错误类型的直接链接">​</a></h2>
<p>定义自定义错误需要实现自定义类型，更具体地说，是枚举。这必须强制符合 <code>Error</code> 协议，原因很重要；如果没有该一致性，枚举中定义的案例将无法在 <code>do-catch</code> 语句中捕获，而这是在指定自定义错误时的最终目标。</p>
<p>让我们看一个假设场景的示例，其中我们实现了一个包含有关用户提供的密码的错误的自定义类型：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">enum</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">tooShort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">minLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">tooLong</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">maxLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> noUppercaseCharacter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> noLowercaseCharacter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> noNumber</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> noSpecialCharacter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> easilyGuessed</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>上面演示的 <code>PasswordError</code> 枚举包含有和没有关联值的案例的混合。每个案例都表示用户尝试在表单中输入密码时可能发生的不同类型的错误。具有关联值的枚举包含有关错误的其他信息。</p>
<p>上面的示例足以定义自定义错误。但是，它仅在不希望也向用户提供任何类型的错误描述时才足够。这是一个完全可以接受的情况，因为我们可能会定义供内部使用的错误，而文本描述永远不会传递给用户或我们开发者。另一方面，如果需要错误描述，那么我们可以从几个选项中进行选择来指定它们。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="指定基本错误描述">指定基本错误描述<a href="https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift#%E6%8C%87%E5%AE%9A%E5%9F%BA%E6%9C%AC%E9%94%99%E8%AF%AF%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="指定基本错误描述的直接链接" title="指定基本错误描述的直接链接">​</a></h2>
<p>定义自定义错误描述的最常见和最常见的方法是通过符合 <code>CustomStringConvertible</code> 协议并实现必需的 <code>description</code> 计算属性。通常，并且主要是出于清晰度的原因，该一致性发生在包含自定义错误案例的枚举的扩展中。</p>
<p>对于我们的 <code>PasswordError</code> 示例，我们可以实现以下内容：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">CustomStringConvertible</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> description</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tooShort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码太短”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tooLong</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码太长”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noUppercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码缺少大写字母”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noLowercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码缺少小写字母”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noNumber</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码缺少数字”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noSpecialCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码缺少特殊字符”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">easilyGuessed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> “密码很常见”</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>大多数情况下，类似于此处演示的实现是好的，因此我们可以获得错误的文本描述。我们可以在调试时在控制台中打印它们，并对我们在应用程序制作过程中遇到的各种问题得出结论。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> error </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noUppercaseCharacter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">description</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 输出：密码缺少大写字母</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>但是，当涉及面向用户的描述时，这不是最佳选择。有一个更好的选择，正如你接下来将看到的，它带来了一些优势。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="提供本地化错误描述">提供本地化错误描述<a href="https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift#%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%94%99%E8%AF%AF%E6%8F%8F%E8%BF%B0" class="hash-link" aria-label="提供本地化错误描述的直接链接" title="提供本地化错误描述的直接链接">​</a></h2>
<p>要向不同语言显示用户友好的本地化消息，我们的自定义错误枚举应符合 <code>LocalizedError</code> 协议。通过这样做，三个新的计算属性变得可用，第一个是 <code>errorDescription</code>。这是一个 <code>String</code> 属性，在其中，与之前完全相同，我们为每个错误案例设置一个描述。为了允许本地化，请确保将每段文本作为参数传递给 <code>String(localized:)</code> 方法。</p>
<p>例如：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">LocalizedError</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> errorDescription</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tooShort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> minLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码必须至少 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">minLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> 个字符长”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tooLong</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> maxLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码不能超过 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">maxLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> 个字符”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noUppercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码必须至少包含一个大写字母”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noLowercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码必须至少包含一个小写字母”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noNumber</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码必须至少包含一个数字”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noSpecialCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码必须至少包含一个特殊字符”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">easilyGuessed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码太常见。请选择更强的密码”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你可能会正确地想知道为什么最好符合 <code>LocalizedError</code> 并实现 <code>errorDescription</code> 属性。<code>CustomStringConvertible</code> 协议的 <code>description</code> 属性可以通过为每个错误案例返回本地化字符串来产生相同的结果。</p>
<p>选择 <code>LocalizedError</code> 有两个很好的理由。首先，符合 <code>CustomStringConvertible</code> 通常旨在提供我们可以在应用程序开发过程中使用的描述，例如在控制台中打印它们。其次，<code>LocalizedError</code> 带有几个附加功能，允许提供多个错误消息，因此如果在前端显示，可以实现最佳的用户体验。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="指定失败原因和恢复建议">指定失败原因和恢复建议<a href="https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift#%E6%8C%87%E5%AE%9A%E5%A4%B1%E8%B4%A5%E5%8E%9F%E5%9B%A0%E5%92%8C%E6%81%A2%E5%A4%8D%E5%BB%BA%E8%AE%AE" class="hash-link" aria-label="指定失败原因和恢复建议的直接链接" title="指定失败原因和恢复建议的直接链接">​</a></h2>
<p>我们从 <code>LocalizedError</code> 协议获得的另外两个优点涉及 <code>errorDescription</code> 之外的两个附加计算属性，我们可以在按需使用它们。它们都是可选的，因此我们可以根据需要使用它们。</p>
<p>第一个是 <code>failureReason</code>，这是指定错误原因的更详细解释的地方。与 <code>errorDescription</code> 属性类似，它可以为每个错误案例返回一个字符串值：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">LocalizedError</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> failureReason</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tooShort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码太短”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tooLong</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码太长”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noUppercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码不包含任何大写字母”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noLowercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码不包含任何小写字母”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noNumber</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码不包含任何数字”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noSpecialCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码不包含任何特殊字符”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">easilyGuessed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “密码是常用的密码”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>另一个附加计算属性是 <code>recoverySuggestion</code>。它的名称不言自明，因为这是我们定义有关用户如何修复或克服错误的描述的地方：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">LocalizedError</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">public</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> recoverySuggestion</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token operator">?</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tooShort</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> minLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “使你的密码至少 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">minLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> 个字符长”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">tooLong</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> maxLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “将你的密码缩短到少于 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">maxLength</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> 个字符”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noUppercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “包括至少一个大写字母 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noLowercaseCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “包括至少一个小写字母 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">a</span><span class="token operator">-</span><span class="token plain">z</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noNumber</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “包括至少一个数字 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noSpecialCharacter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “包括至少一个特殊字符 </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">例如，</span><span class="token operator">!</span><span class="token plain">@#$</span><span class="token operator">%^&amp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token operator">*</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">easilyGuessed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">localized</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> “选择一个唯一且强大的密码”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>通过利用 <code>LocalizedError</code> 的所有三个计算属性，我们能够创建用户友好、信息丰富且有用的自定义错误，从而提升用户体验。只需记住每个属性的回答：</p>
<ul>
<li><code>errorDescription</code>：出了什么问题？</li>
<li><code>failureReason</code>：为什么？</li>
<li><code>recoverySuggestion</code>：如何修复？</li>
</ul>
<p>例如：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> error </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">PasswordError</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">noUppercaseCharacter</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">localizedDescription</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">failureReason </span><span class="token operator">??</span><span class="token plain"> “”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">recoverySuggestion </span><span class="token operator">??</span><span class="token plain"> “”</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 输出：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 密码必须至少包含一个大写字母</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 密码不包含任何大写字母</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 包括至少一个大写字母 (A-Z)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a href="https://goswiftui.com/blog/2024/03/06/defining-custom-errors-with-advanced-descriptions-in-swift#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="结论的直接链接" title="结论的直接链接">​</a></h2>
<p>定义自定义错误是开发人员的常见任务，但正如你所看到的，它不仅仅是实现一个枚举。有协议要遵守并为自定义错误指定描述，无论是基本的还是更高级的。我建议使用 <code>CustomStringConvertible</code> 协议的 <code>description</code> 属性来定义你将在制作应用程序时使用的错误消息。对将呈现给用户的本地化消息使用 <code>LocalizedError</code> 计算属性。如果你不知道上面讨论的 <code>failureReason</code> 和 <code>recoverySuggestion</code> 属性，现在是开始使用它们的好时机。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://serialcoder.dev/text-tutorials/swift-tutorials/defining-custom-errors-with-advanced-descriptions-in-swift/" target="_blank" rel="noopener noreferrer">https://serialcoder.dev/text-tutorials/swift-tutorials/defining-custom-errors-with-advanced-descriptions-in-swift/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>swift</category>
        </item>
        <item>
            <title><![CDATA[iOS APP 如何轻松测试应用内购买(IAP)]]></title>
            <link>https://goswiftui.com/blog/2024/03/05/how-to-easily-test-in-app-purchases</link>
            <guid>https://goswiftui.com/blog/2024/03/05/how-to-easily-test-in-app-purchases</guid>
            <pubDate>Tue, 05 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[如果你曾经使用过依赖于应用内购买（我将其缩写为 IAP）的 iOS 应用程序，你可能已经体验过彻底测试你的 IAP 是否正常工作是多么具有挑战性。]]></description>
            <content:encoded><![CDATA[<p>如果你曾经使用过依赖于应用内购买（我将其缩写为 IAP）的 iOS 应用程序，你可能已经体验过彻底测试你的 IAP 是否正常工作是多么具有挑战性。</p>
<p>这是因为 IAP 处于一个特别困难的交叉点：</p>
<ul>
<li>一方面，围绕 IAP 的用户流程可能会很快变得复杂：恢复购买、从一个计划升级或降级到另一个计划、订阅价格上涨通知等。</li>
<li>另一方面，IAP 通常是使用它们的应用程序的主要收入来源，因此生产中的 IAP 损坏可能会对应用程序背后的公司产生非常严重的后果</li>
</ul>
<p>然而，苹果似乎注意到这正在成为一个问题，因为几年前他们在 Xcode 中引入了一项新功能，使测试 IAP 比以前更容易：<strong>StoreKit 配置文件</strong>。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="为什么我们需要-storekit-配置文件"><strong>为什么我们需要 StoreKit 配置文件？</strong><a href="https://goswiftui.com/blog/2024/03/05/how-to-easily-test-in-app-purchases#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81-storekit-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" class="hash-link" aria-label="为什么我们需要-storekit-配置文件的直接链接" title="为什么我们需要-storekit-配置文件的直接链接">​</a></h3>
<p>让我们考虑这个只显示此 <code>**View**</code> 的简单 iOS 应用程序：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/35d1762e-f0c2-43c8-9e77-ee1f75125c8e/Screenshot%2B2024-02-18%2Bat%2B15.38.44.png" alt="" class="img_ev3q"></p>
<p>如你所见，此 <code>**View**</code> 尝试使用其 <code>**productIds**</code> 从 <code>**StoreKit**</code> 加载三个产品。</p>
<p>当 <code>**Product**</code> 成功加载时，<code>**View**</code> 将显示一个 <code>**Button**</code>，允许用户购买该 <code>**Product**</code>。</p>
<p>但是，如果你在模拟器中运行此代码，你会注意到似乎没有一个产品成功加载：</p>
<p>这实际上是完全正常的：到目前为止，我们还没有在 App Store Connect 中配置任何可购买的 <code>**Product**</code>。</p>
<p>但我们将看到，多亏了 StoreKit 配置文件，实际上可以在本地测试此购买流程，而无需在 App Store Connect 上进行任何更改！</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何设置-storekit-配置文件"><strong>如何设置 StoreKit 配置文件</strong><a href="https://goswiftui.com/blog/2024/03/05/how-to-easily-test-in-app-purchases#%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE-storekit-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" class="hash-link" aria-label="如何设置-storekit-配置文件的直接链接" title="如何设置-storekit-配置文件的直接链接">​</a></h3>
<p>要在 Xcode 中创建 StoreKit 配置文件，只需在菜单中单击 <em>文件 &gt; 新建 &gt; 文件…</em>。</p>
<p>从中，确保选择选项 <em>StoreKit 配置文件</em>：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/e1adcd77-271f-4649-88c9-17dbba964ad8/Screenshot%2B2024-02-18%2Bat%2B15.49.39.png" alt="" class="img_ev3q"></p>
<p>然后，你只需为你的 <em>StoreKit 配置文件</em> 命名：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/b3aaabae-8c86-41fa-9d0b-0aaec6e6cf09/Screenshot%2B2024-02-18%2Bat%2B15.50.35.png" alt="" class="img_ev3q"></p>
<p>如果你的应用程序已经在 App Store Connect 中设置了 IAP，强烈建议选中 <em>将此文件与 App Store Connect 中的应用程序同步</em>。</p>
<p>通过这种方式，StoreKit 配置文件将自动生成并与来自 App Store Connect 的准确数据保持同步 👌</p>
<p>但是，出于此电子邮件的目的，我们将手动创建 StoreKit 配置文件的内容，因为它可以更轻松地理解其工作原理。</p>
<p>所以让我们打开这个新的 StoreKit 配置文件！</p>
<p>该文件当前为空，因此让我们按照说明进行操作并 <em>单击“+”按钮以添加应用内购买或订阅</em>：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/feab6893-b88d-459d-bd6b-f22fedba62cd/Screenshot%2B2024-02-18%2Bat%2B16.24.28.png" alt="" class="img_ev3q"></p>
<p>我们将选择 <em>添加不可消耗的应用内购买</em>，因为这是最容易设置的。</p>
<p>然后系统会要求我们设置 <em>参考名称</em> 和 <em>产品 ID</em>：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/f1ae7322-da75-403d-a171-fc2ad690c68c/Screenshot%2B2024-02-18%2Bat%2B15.58.15.png" alt="" class="img_ev3q"></p>
<p>在此处，确保你使用与在代码中设置的相同的 <em>产品 ID</em>！</p>
<p>我们几乎完成了，我们最后需要做的是定义一些本地化的 <em>显示名称</em> 和 <em>描述</em>：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/b424eec3-56a3-41e0-aa26-651629f4bfaf/Screenshot%2B2024-02-18%2Bat%2B16.00.26.png" alt="" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/5f7c3441-86a7-4ef7-b853-a78d1657a0b7/Screenshot%2B2024-02-18%2Bat%2B16.01.03.png" alt="" class="img_ev3q"></p>
<p>（不要跳过设置本地化的 <em>显示名称</em> 和 <em>描述</em>，否则你的 IAP 将不会显示！）</p>
<p>如果你愿意，你还可以修改购买时显示的价格：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/1e8e8e25-d2b1-4f67-894c-c461d527fa78/Screenshot%2B2024-02-18%2Bat%2B16.25.24.png" alt="" class="img_ev3q"></p>
<p>现在我们几乎准备好使用我们的新 StoreKit 配置文件了！</p>
<p>只剩一步：我们需要让 Xcode 知道在运行应用程序时应该使用该文件。</p>
<p>由于它已经适用于许多其他运行时选项，因此这是通过项目的 <em>方案</em> 配置的。</p>
<p>因此，单击当前 <em>方案</em> 并选择 <em>编辑方案…</em>：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/00d5abd6-a78a-45f4-b607-5d6bfd98f893/Screenshot%2B2024-02-18%2Bat%2B16.05.06.png" alt="" class="img_ev3q"></p>
<p>然后只需选择你刚刚创建的 StoreKit 配置文件：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/a93d7023-c81f-4be0-a2a5-a1d27f2b7de1/Screenshot%2B2024-02-18%2Bat%2B16.05.25.png" alt="" class="img_ev3q"></p>
<p>现在，如果你在模拟器中再次运行你的应用程序，你将看到我们在 StoreKit 配置文件中定义的 <code>**Product**</code> 现在已成功加载。</p>
<p>更好的是：你还可以购买它！</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="storekit-配置文件还能做什么"><strong>StoreKit 配置文件还能做什么？</strong><a href="https://goswiftui.com/blog/2024/03/05/how-to-easily-test-in-app-purchases#storekit-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%BF%98%E8%83%BD%E5%81%9A%E4%BB%80%E4%B9%88" class="hash-link" aria-label="storekit-配置文件还能做什么的直接链接" title="storekit-配置文件还能做什么的直接链接">​</a></h3>
<p>能够在本地模拟购买 <strong>StoreKit</strong> <strong>Product</strong> 已经非常有用，但 StoreKit 配置文件实际上能够做更多的事情！</p>
<p>你还可以利用该文件来模拟和测试一些非常棘手的边缘情况，例如：</p>
<ul>
<li>App Store Connect 发行的退款</li>
<li>用户收到订阅价格上涨的通知</li>
<li>启用或禁用家庭共享</li>
</ul>
<p>如果你想了解有关使用 StoreKit 配置文件的更多信息，你可以阅读 <a href="https://developer.apple.com/documentation/xcode/setting-up-storekit-testing-in-xcode/" target="_blank" rel="noopener noreferrer">Apple 的官方文档</a> 或你可以 <a href="https://www.youtube.com/watch?v=o_YMsmmkfFc" target="_blank" rel="noopener noreferrer">观看我去年发布的这段视频</a>：</p>
<p>此外，如果你想使用 StoreKit 配置文件进行实验，我使用的 iOS 应用程序的代码 <a href="https://github.com/joshdholtz/storekit-config-file-demo" target="_blank" rel="noopener noreferrer">可在 GitHub 上获得</a> 👌</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.swiftwithvincent.com/blog/how-to-easily-test-in-app-purchases" target="_blank" rel="noopener noreferrer">https://www.swiftwithvincent.com/blog/how-to-easily-test-in-app-purchases</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>StoreKit</category>
            <category>iOS</category>
            <category>IAP</category>
        </item>
        <item>
            <title><![CDATA[如何在 SwiftUI 中延迟动画]]></title>
            <link>https://goswiftui.com/blog/2024/03/04/delay-swiftui-animation</link>
            <guid>https://goswiftui.com/blog/2024/03/04/delay-swiftui-animation</guid>
            <pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[在 SwiftUI 中使用动画时，我们有时需要延迟动画，例如在向用户显示 UI 元素后在一段时间后将其隐藏。了解如何在开始 SwiftUI 动画之前等待一段时间。]]></description>
            <content:encoded><![CDATA[<p>在 SwiftUI 中使用动画时，我们有时需要延迟动画，例如在向用户显示 UI 元素后在一段时间后将其隐藏。</p>
<p>让我们直接开始，看看如何做到这一点。</p>
<p>我们来看看以下示例：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> offset </span><span class="token operator">=</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">60.0</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 1.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">ErrorView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">offset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">y</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> offset</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">onAppear </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// 2.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token function" style="color:rgb(80, 250, 123)">withAnimation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bouncy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                offset </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">60.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> completion</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 3.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token function" style="color:rgb(80, 250, 123)">withAnimation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bouncy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    offset </span><span class="token operator">=</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">60.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们在上面的代码中所做的是：</p>
<ol>
<li>将视图的初始偏移量设置为屏幕边界之外，以便它最初不可见。</li>
<li>只要视图出现，我们就会对其进行动画处理，使其偏移量不同，以便在屏幕上可见。</li>
<li>只要动画完成，我们就会对视图进行动画处理，使其返回到不可见偏移量。</li>
</ol>
<p>示例中缺少的是延迟，因此视图在反弹回来之前会在屏幕上停留几秒钟。</p>
<p>由于延迟内置于 SwiftUI 动画中，我们可以通过一个简单的调用来实现这一点。我们需要做的就是为第二个动画添加延迟：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token function" style="color:rgb(80, 250, 123)">withAnimation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bouncy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">delay</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://tanaschita.com/20240226-delay-swiftui-animation/" target="_blank" rel="noopener noreferrer">https://tanaschita.com/20240226-delay-swiftui-animation/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>swiftui</category>
            <category>animations</category>
            <category>swift</category>
            <category>ios</category>
        </item>
        <item>
            <title><![CDATA[如何以及何时使用 Swift 中的扩展]]></title>
            <link>https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them</link>
            <guid>https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them</guid>
            <pubDate>Mon, 04 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Swift 中的扩展允许你扩展类、结构体、协议和枚举，即使你无法访问源代码。所谓的追溯建模允许你扩展你没有源代码访问权限的类型。Swift 的这一强大功能使你能够在外部代码之上创建自定义层。作为一名应用程序开发者，何时以及如何使用它们是一项重要的技能，所以让我们深入了解一下。]]></description>
            <content:encoded><![CDATA[<p>Swift 中的扩展允许你扩展类、结构体、协议和枚举，即使你无法访问源代码。</p>
<p>所谓的追溯建模允许你扩展你没有源代码访问权限的类型。Swift 的这一强大功能使你能够在外部代码之上创建自定义层。作为一名应用程序开发者，何时以及如何使用它们是一项重要的技能，所以让我们深入了解一下。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是扩展">什么是扩展？<a href="https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them#%E4%BB%80%E4%B9%88%E6%98%AF%E6%89%A9%E5%B1%95" class="hash-link" aria-label="什么是扩展？的直接链接" title="什么是扩展？的直接链接">​</a></h2>
<p>从字面上讲，扩展扩展了现有代码。例如，你可能有一个带有名字和姓氏的 <code>Person</code> 结构体：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你可以为这个结构体创建一个扩展并添加一个 <code>fullName</code> 属性：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            firstName </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">" "</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> lastName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>在这种情况下，我们可以访问 <code>Person</code> 结构体的源代码，因此我们也可以决定在结构体本身内定义 <code>fullName</code> 计算属性：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            firstName </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">" "</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> lastName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>对于这个示例来说，这样做更有意义，因为它将所有可用属性保存在一个地方。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="在没有源代码访问权限的情况下扩展类型">在没有源代码访问权限的情况下扩展类型<a href="https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them#%E5%9C%A8%E6%B2%A1%E6%9C%89%E6%BA%90%E4%BB%A3%E7%A0%81%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E6%89%A9%E5%B1%95%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="在没有源代码访问权限的情况下扩展类型的直接链接" title="在没有源代码访问权限的情况下扩展类型的直接链接">​</a></h3>
<p>当由于缺少源代码访问权限而无法自定义类型的实现时，可以使用扩展来创建自定义访问器。例如，我们可以创建一个 <code>Date</code> 扩展来向当前值添加天数：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">addingDays</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token omit keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token plain"> days</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Calendar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">current</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">byAdding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">day</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> days</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> to</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们现在通过添加一个新方法扩展了 <code>Date</code> 类型。我们可以按如下方式使用该方法：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">Date</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">addingDays</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>即使我们无法访问 <code>Date</code> 类型的源代码，我们也能够使用自定义功能对其进行扩展。这可以是创建可发现代码的好方法，因为任何扩展方法都可以使用自动完成功能找到：</p>
<p><img decoding="async" loading="lazy" src="https://www.avanderlee.com/wp-content/uploads/2024/02/extensions_in_swift.png" alt="Swift 中的扩展允许你扩展类型，即使你没有源代码访问权限。" class="img_ev3q"></p>
<p>Swift 中的扩展允许你扩展类型，即使你没有源代码访问权限。</p>
<p>通过使你的自定义代码更易于发现，你可以让团队中的其他人发现自定义（通常有用的）扩展。这比创建每个人都应该知道的自定义类型（例如 <code>DateDaysCalculator</code>）效果更好。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用扩展创建默认协议实现">使用扩展创建默认协议实现<a href="https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them#%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E5%88%9B%E5%BB%BA%E9%BB%98%E8%AE%A4%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0" class="hash-link" aria-label="使用扩展创建默认协议实现的直接链接" title="使用扩展创建默认协议实现的直接链接">​</a></h2>
<p>协议接口不允许你编写可选成员，即使某些方法对于每个实例可能不是必需的。其次，你可能希望提供默认行为并允许类型在需要时覆盖此行为。我们可以使用扩展来创建此行为。</p>
<p>例如，假设有一个 <code>NameContaining</code> 协议：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">protocol</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们可以在没有任何更改的情况下使我们的 <code>Person</code> 结构体符合此协议：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            firstName </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">" "</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> lastName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>现在假设我们引入另一个 <code>NameContaining</code> 类型，但这次它是一个 <code>Pet</code>：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Pet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            firstName </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">" "</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> lastName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>你可以看到我们必须复制计算的 <code>fullName</code> 属性，即使它的功能与 <code>Person</code> 的实现相匹配。使用协议扩展，我们可以在保持相同功能的同时删除样板代码：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">protocol</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 此计算属性为 `NameContaining` 协议提供默认实现。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            firstName </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">" "</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> lastName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Pet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>此技术功能强大，可以防止你编写许多样板代码。如果你确实想提供自定义实现，你始终可以决定覆盖默认实现：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstNameFirstChar </span><span class="token operator">=</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">first</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">uppercased</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> firstNameFirstChar </span><span class="token operator">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">". "</span><span class="token plain"> </span><span class="token operator">+</span><span class="token plain"> lastName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Pet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> person </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> pet </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Pet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Bernie"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"van der Lee"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 `fullName` 的自定义实现打印：“A. van der Lee”</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">person</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 `fullName` 的默认实现打印：“Bernie van der Lee”</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">pet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用扩展符合协议">使用扩展符合协议<a href="https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them#%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95%E7%AC%A6%E5%90%88%E5%8D%8F%E8%AE%AE" class="hash-link" aria-label="使用扩展符合协议的直接链接" title="使用扩展符合协议的直接链接">​</a></h2>
<p>Swift 中的扩展还允许你添加协议一致性。如果你想在源文件外部定义协议一致性，或者在无法访问源代码的情况下，这将非常有用。</p>
<p>例如，我们可以扩展 <code>ContactsUI</code> 框架的 <code>CNContact</code> 类型并使其符合我们的 <code>NameContaining</code> 协议：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">ContactsUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">CNContact</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> firstName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            givenName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> lastName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            middleName </span><span class="token operator">+</span><span class="token plain"> familyName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> fullName</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            givenName </span><span class="token operator">+</span><span class="token plain"> middleName </span><span class="token operator">+</span><span class="token plain"> familyName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这现在使我们能够创建与 <code>NameContaining</code> 协议一起使用的实例，而无需知道它们是处理 <code>Pet</code>、<code>Person</code> 还是 <code>CNContact</code>：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">SwiftUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">NameView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> nameContaining</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NameContaining</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"This person's name is: </span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">nameContaining</span><span class="token string-literal interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token string-literal interpolation">fullName</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="结论">结论<a href="https://goswiftui.com/blog/2024/03/04/extensions-in-swift-how-and-when-to-use-them#%E7%BB%93%E8%AE%BA" class="hash-link" aria-label="结论的直接链接" title="结论的直接链接">​</a></h3>
<p>Swift 中的扩展是一项强大的功能，允许你编写对结构体、类、协议或枚举的扩展。无论你是否可以访问源代码，扩展都可以扩展任何这些类型。将扩展与协议结合使用，你可以编写可重用代码，而无需太多样板。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.avanderlee.com/swift/extensions/" target="_blank" rel="noopener noreferrer">https://www.avanderlee.com/swift/extensions/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>swift</category>
            <category>extensions</category>
        </item>
        <item>
            <title><![CDATA[用SwiftUI轻松使用SFSafariViewController实现在APP里打开网页]]></title>
            <link>https://goswiftui.com/blog/2023/12/07/sfsafariviewcontroller-open-webpages-in-app</link>
            <guid>https://goswiftui.com/blog/2023/12/07/sfsafariviewcontroller-open-webpages-in-app</guid>
            <pubDate>Thu, 07 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[学习如何在SwiftUI应用中使用SFSafariViewController创建包装器，以实现在应用内而非外部浏览器中打开网页。通过此教程，您将了解创建可重用代码、捕获任何即将离开的URL，并通过环境对象在应用程序内呈现它们的步骤。]]></description>
            <content:encoded><![CDATA[<p>SFSafariViewController 可用于让用户在应用内而非外部浏览器中打开网页。虽然该视图控制器在 UIKit 中运行良好，但在 SwiftUI 应用中让其正常工作可能具有挑战性。</p>
<p>每当你遇到只有 UIKit 解决方案可用的情况时，你想知道如何编写一个包装器并使 UIKit 类对 SwiftUI 视图可用。最好的情况是，它是可重用的，以便稍后可以重复使用它。让我们深入了解吧！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="为-sfsafariviewcontroller-创建-swiftui-包装器">为 SFSafariViewController 创建 SwiftUI 包装器<a href="https://goswiftui.com/blog/2023/12/07/sfsafariviewcontroller-open-webpages-in-app#%E4%B8%BA-sfsafariviewcontroller-%E5%88%9B%E5%BB%BA-swiftui-%E5%8C%85%E8%A3%85%E5%99%A8" class="hash-link" aria-label="为 SFSafariViewController 创建 SwiftUI 包装器的直接链接" title="为 SFSafariViewController 创建 SwiftUI 包装器的直接链接">​</a></h2>
<p>我们通过创建 <code>UIViewRepresentable</code> 的实现来开始实现 <code>SFSafariViewController</code> 的 SwiftUI 包装器。该协议允许我们创建一个 SwiftUI 视图，该视图包装了 UIKit 视图控制器：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">SFSafariView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">UIViewControllerRepresentable</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">URL</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">makeUIViewController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">UIViewControllerRepresentableContext</span><span class="token operator">&lt;</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">Self</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">SFSafariViewController</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">SFSafariViewController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">updateUIViewController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token omit keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token plain"> uiViewController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">SFSafariViewController</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">UIViewControllerRepresentableContext</span><span class="token operator">&lt;</span><span class="token class-name">SFSafariView</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// 这里不需要做任何事情</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们需要实现两个方法：</p>
<ul>
<li><code>makeUIViewController</code> 将被调用以创建 <code>UIViewController</code> 实例</li>
<li><code>updateUIViewController</code> 将被调用以使用 SwiftUI 中的新信息更新 <code>UIViewController</code> 的状态</li>
</ul>
<p>在我们的情况下，我们只需使用给定的 URL 实例化 <code>SFSafariViewController</code>。</p>
<p>同样的技术也适用于 <code>UIView</code> 实例，我在我的文章中已经解释过<a href="https://www.avanderlee.com/swiftui/integrating-swiftui-with-uikit/" target="_blank" rel="noopener noreferrer">使用 UIViewRepresentable 将 UIView 实例集成到 SwiftUI 中</a>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="创建可重用的视图修饰符">创建可重用的视图修饰符<a href="https://goswiftui.com/blog/2023/12/07/sfsafariviewcontroller-open-webpages-in-app#%E5%88%9B%E5%BB%BA%E5%8F%AF%E9%87%8D%E7%94%A8%E7%9A%84%E8%A7%86%E5%9B%BE%E4%BF%AE%E9%A5%B0%E7%AC%A6" class="hash-link" aria-label="创建可重用的视图修饰符的直接链接" title="创建可重用的视图修饰符的直接链接">​</a></h2>
<p>我总是喜欢从一开始就编写可重用的代码，以允许我的代码可以重复使用。我甚至有一个专门用于扩展的包，我可以轻松地在不同的应用程序中重复使用它，从而在遇到以前见过的问题时更快地编写应用程序。</p>
<p>在这种情况下，我想要一个视图修饰符，它可以捕获通常在外部浏览器中打开的任何链接。在 SwiftUI 中，这些链接可以如下生成：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">SwiftUILinksView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">spacing</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">20</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 `Link` 视图创建链接：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Link</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"SwiftUI Link 示例"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> destination</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">URL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"https://www.rocketsim.app"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 markdown 创建链接：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Markdown 链接示例: [RocketSim](https://www.rocketsim.app)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>关键是在环境视图修饰符内使用 <code>openURL</code> 环境属性。视图修饰符的代码如下：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">/// 监控 `openURL` 环境变量并在应用内处理它们而不是通过外部网络浏览器处理它们。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">SafariViewControllerViewModifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">ViewModifier</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> urlToOpen</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">URL</span><span class="token operator">?</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        content</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">environment</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">openURL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">OpenURLAction</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> url </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 捕获即将在外部浏览器中打开的任何 URL。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 相反，在这里处理它们并存储 URL 以在我们的 sheet 中重新打开。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                urlToOpen </span><span class="token operator">=</span><span class="token plain"> url</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">handled</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">sheet</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">isPresented</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $urlToOpen</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">mappedToBool</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> onDismiss</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                urlToOpen </span><span class="token operator">=</span><span class="token plain"> </span><span class="token nil constant" style="color:rgb(189, 147, 249)">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token class-name">SFSafariView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">url</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> urlToOpen</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>我们使用视图修饰符来捕获任何正在进行的 URL，并将它们用作我们 sheet 的输入。该 sheet 将使用我们之前创建的 <code>SFSafariView</code> 来使用 <code>SFSafariViewController</code> 在应用程序中呈现 URL。</p>
<p>请注意，我们使用了另一个扩展，该扩展允许将任何可选绑定映射到布尔绑定：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Binding</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">where</span><span class="token plain"> </span><span class="token class-name">Value</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">binding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">?&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">get</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                binding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wrappedValue </span><span class="token operator">!=</span><span class="token plain"> </span><span class="token nil constant" style="color:rgb(189, 147, 249)">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">set</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> newValue </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">guard</span><span class="token plain"> newValue </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 我们只处理 `false` 布尔值以将我们的可选值设置为 `nil`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 因为我们不能处理用于恢复先前值的 `true`。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                binding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wrappedValue </span><span class="token operator">=</span><span class="token plain"> </span><span class="token nil constant" style="color:rgb(189, 147, 249)">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Binding</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 将可选绑定映射到 `Binding&lt;Bool&gt;`。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 例如，可以使用 `Error?` 对象来决定是否显示警报，而无需依赖于单独处理的 `Binding&lt;Bool&gt;`。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">mappedToBool</span><span class="token operator">&lt;</span><span class="token class-name">Wrapped</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">where</span><span class="token plain"> </span><span class="token class-name">Value</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token class-name">Wrapped</span><span class="token operator">?</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Binding</span><span class="token operator">&lt;</span><span class="token class-name">Bool</span><span class="token operator">&gt;</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">binding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这是我在编写 SwiftUI 解决方案时经常重复使用的扩展之一。</p>
<p>最后缺失的是一个方便的视图扩展，以更轻松地访问我们的逻辑：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 监控 `openURL` 环境变量并在应用内处理它们而不是通过外部网络浏览器处理它们。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 `SafariViewWrapper`，该包装器将在 `SFSafariViewController` 中呈现 URL。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">handleOpenURLInApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">modifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token class-name">SafariViewControllerViewModifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="在-swiftui-中呈现-sfsafariviewcontroller">在 SwiftUI 中呈现 SFSafariViewController<a href="https://goswiftui.com/blog/2023/12/07/sfsafariviewcontroller-open-webpages-in-app#%E5%9C%A8-swiftui-%E4%B8%AD%E5%91%88%E7%8E%B0-sfsafariviewcontroller" class="hash-link" aria-label="在 SwiftUI 中呈现 SFSafariViewController的直接链接" title="在 SwiftUI 中呈现 SFSafariViewController的直接链接">​</a></h2>
<p>现在我们有了所有的逻辑，我们可以开始在 SwiftUI 中使用视图扩展方法呈现任何即将离开的 URL 在 <code>SFSafariViewController</code> 中。我们可以通过在我们的垂直堆栈上使用视图扩展方法来实现：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">SwiftUILinksView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">spacing</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">20</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 `Link` 视图创建链接：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Link</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"SwiftUI Link 示例"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> destination</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">URL</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"https://www.rocketsim.app"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 使用 markdown 创建链接：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Markdown 链接示例: [RocketSim](https://www.rocketsim.app)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">/// 这捕获任何正在进行的 URL。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">handleOpenURLInApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>请确保你了解<a href="https://www.avanderlee.com/swiftui/environmentobject/" target="_blank" rel="noopener noreferrer">环境对象是如何通过子视图传递的</a>。总的来说，这段代码允许我们捕获任何即将离开的 URL 并在应用程序中呈现它们：</p>
<video loop="" muted="" src="https://www.avanderlee.com/wp-content/uploads/2023/12/sfsafariviewcontroller_swiftui.mp4" max-width="100%" width="100%"></video>
<p>创建包装器后，您可以在 SwiftUI 中使用 SFSafariViewController。</p>
<p>最终结果允许您通过重复使用视图修饰符轻松捕获代码中的任何即将离开的 URL。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.avanderlee.com/swiftui/sfsafariviewcontroller-open-webpages-in-app/" target="_blank" rel="noopener noreferrer">https://www.avanderlee.com/swiftui/sfsafariviewcontroller-open-webpages-in-app/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>SFSafariViewController</category>
        </item>
        <item>
            <title><![CDATA[iOS 17中的SwiftUI分栏视图控制：首选紧凑列详解]]></title>
            <link>https://goswiftui.com/blog/2023/12/07/swiftui-splitview-compact-column-control</link>
            <guid>https://goswiftui.com/blog/2023/12/07/swiftui-splitview-compact-column-control</guid>
            <pubDate>Thu, 07 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[了解iOS 17中新增的SwiftUI NavigationSplitView功能，探索如何在分栏视图折叠为单一列时精确控制显示哪一列。通过实例演示新的初始化器和NavigationSplitViewColumn状态的使用，使您能够定制分栏视图在紧凑宽度下的显示行为。]]></description>
            <content:encoded><![CDATA[<p>在 iOS 17 中，Apple 新增了对分栏视图（Split View）折叠为单一列时显示哪一列的控制功能。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="navigationsplitview">NavigationSplitView<a href="https://goswiftui.com/blog/2023/12/07/swiftui-splitview-compact-column-control#navigationsplitview" class="hash-link" aria-label="NavigationSplitView的直接链接" title="NavigationSplitView的直接链接">​</a></h2>
<p>在 iOS 16 中，Apple 引入了<code>NavigationSplitView</code>，用于在 SwiftUI 中创建两列或三列布局。iOS 16 中的<a href="https://useyourloaf.com/blog/swiftui-split-view-configuration/" target="_blank" rel="noopener noreferrer">分栏视图配置</a>包含控制列的可见性、宽度和样式的选项。然而，在较小的宽度下，缺少了控制分栏视图折叠为单一列时显示哪一列的 API。Apple 在 iOS 17（以及 macOS 14）中解决了这个问题。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="首选紧凑列">首选紧凑列<a href="https://goswiftui.com/blog/2023/12/07/swiftui-splitview-compact-column-control#%E9%A6%96%E9%80%89%E7%B4%A7%E5%87%91%E5%88%97" class="hash-link" aria-label="首选紧凑列的直接链接" title="首选紧凑列的直接链接">​</a></h2>
<p>当分栏视图折叠为单一列时，默认行为是让 SwiftUI 根据列的内容自动选择要在顶部显示哪个视图。在 iPhone 上，这似乎意味着显示侧边栏视图，但这并不总是我想要的结果。</p>
<p>在 iOS 17 中，新增了<strong>新的初始化器</strong>，用于创建两列或三列分栏视图。在这两种情况下，可以传递一个绑定到<code>NavigationSplitViewColumn</code>状态的参数，该状态控制分栏视图折叠时显示哪一列。</p>
<p>这是一个三列版本的例子，我将初始状态设置为在折叠时显示内容视图：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> compactColumn </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">NavigationSplitViewColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">content</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">NavigationSplitView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">preferredCompactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token class-name">Sidebar</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token class-name">Content</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> detail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token class-name">Detail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>NavigationSplitViewColumn</code>类型有三个可能的值，分别是<code>sidebar</code>、<code>content</code>和<code>detail</code>列。更改紧凑列状态将导致分栏视图在折叠时切换到显示该列。</p>
<p>例如，为了使我的详细视图能够以编程方式返回到侧边栏列：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">Detail</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token attribute atrule">@Binding</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> compactColumn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NavigationSplitViewColumn</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">Button</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"侧边栏"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      compactColumn </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">sidebar</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">navigationTitle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"详细信息"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>更改首选的紧凑列在分栏视图未折叠时不会产生可见效果，尽管它将改变下一次分栏视图折叠时的行为。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://useyourloaf.com/blog/swiftui-splitview-compact-column-control/" target="_blank" rel="noopener noreferrer">https://useyourloaf.com/blog/swiftui-splitview-compact-column-control/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>iOS 17</category>
        </item>
        <item>
            <title><![CDATA[设计优秀付费墙的8个技巧 | 提高应用收入的秘诀]]></title>
            <link>https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall</link>
            <guid>https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall</guid>
            <pubDate>Thu, 30 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[了解如何通过优化付费墙来提高订阅应用收入。从A/B测试到选择默认套餐，掌握这8个技巧，让您的付费墙成为应用的顶级销售代表。优化文本、突出节省、选择正确的横幅，让用户信任您的付费模型。提高转化率，打造用户体验的关键步骤。]]></description>
            <content:encoded><![CDATA[<p>如果你以前从未参与过订阅应用的开发，你可能想知道什么是付费墙！</p>
<p>对于订阅应用来说，付费墙非常重要，因为它基本上是应用的销售人员。</p>
<p>就像任何销售人员一样，它负责带来收入！</p>
<p>简而言之，付费墙是展示订阅优势并允许用户订阅的屏幕：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/61b4e25c-8bb3-4f68-8ac8-b0a3c38cd53c/unnamed.jpg?content-type=image%2Fjpeg&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<p>这就是为什么这类应用花费大量时间尽力优化他们的付费墙：付费墙越好，产生的收入就越多。</p>
<p>因此，让我们分享 8 个能帮助你设计出色付费墙的技巧。 🚀</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-01测试一切">技巧 #01：测试一切<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-01%E6%B5%8B%E8%AF%95%E4%B8%80%E5%88%87" class="hash-link" aria-label="技巧 #01：测试一切的直接链接" title="技巧 #01：测试一切的直接链接">​</a></h2>
<p>如果有一件事我在付费墙上学到的，那就是没有适用于所有人的最佳实践。</p>
<p>每个应用和每个受众都是不同的，所以不要指望应用某种神奇的“一刀切”的解决方案。</p>
<p>真正了解你是否走在正确的道路上的唯一方法是进行大量实验，并对每个更改进行 A/B 测试，以了解什么有效，什么无效。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-02突出年度节省而非月度">技巧 #02：突出年度节省而非月度<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-02%E7%AA%81%E5%87%BA%E5%B9%B4%E5%BA%A6%E8%8A%82%E7%9C%81%E8%80%8C%E9%9D%9E%E6%9C%88%E5%BA%A6" class="hash-link" aria-label="技巧 #02：突出年度节省而非月度的直接链接" title="技巧 #02：突出年度节省而非月度的直接链接">​</a></h2>
<p>大多数付费墙都提供多种不同期限的订阅：每周、每月、每年等。</p>
<p>在这种情况下，你要突出用户订阅更长期限时可以节省的金额：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/1853b5b6-601f-4b14-903f-39323b375ed1/unnamed-2.png?content-type=image%2Fpng&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<p>有几种方法可以突出这些节省：</p>
<ul>
<li>通过折扣百分比：“83%更便宜”</li>
<li>通过节省的金额：“节省$60”</li>
<li>通过每月费用：“$7.99/年（或$0.66/月）”</li>
</ul>
<p>正如你在上面的例子中看到的那样，完全可以同时使用其中的多种方法！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-03在正确的时间显示">技巧 #03：在正确的时间显示<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-03%E5%9C%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%97%B6%E9%97%B4%E6%98%BE%E7%A4%BA" class="hash-link" aria-label="技巧 #03：在正确的时间显示的直接链接" title="技巧 #03：在正确的时间显示的直接链接">​</a></h2>
<p>这是基本数学：展示付费墙的次数越多，用户购买的机会就越高。</p>
<p>当然，你不想垃圾邮件式地向用户展示付费墙，但以下是一些决定何时展示付费墙的好原则：</p>
<ul>
<li>尽早展示，频繁展示</li>
<li>在“aha”后展示</li>
<li>在用户感到兴奋的时候展示</li>
</ul>
<p>你甚至可以在付费墙的形式上有所创意！</p>
<p>例如，独立开发者 Curtis Herbert 提出了“<a href="https://blog.curtisherbert.com/slopes-diaries-42-building-ramps-not-walls/" target="_blank" rel="noopener noreferrer">支付坡道</a>”（pay ramps）的概念，这是一种小型内联付费墙：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/6196c66d-c5dd-4a16-82e5-6a0b4915d28c/unnamed-3.png?content-type=image%2Fpng&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-04选择默认套餐">技巧 #04：选择默认套餐<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-04%E9%80%89%E6%8B%A9%E9%BB%98%E8%AE%A4%E5%A5%97%E9%A4%90" class="hash-link" aria-label="技巧 #04：选择默认套餐的直接链接" title="技巧 #04：选择默认套餐的直接链接">​</a></h2>
<p>你希望用户尽可能轻松地购买你的订阅。</p>
<p>用户只需点击“购买”按钮即可购买订阅。</p>
<p>任何其他操作都应是可选的，因为将其强制设为必选很可能会降低你的转化率。</p>
<p>例如，你不想强迫用户选择你提供的计划之一。相反，你希望默认已选择一个：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/3efecde8-7c11-4721-9485-b65f2bc097e3/Group.png?content-type=image%2Fpng&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-05选择最佳的行动号召">技巧 #05：选择最佳的行动号召<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-05%E9%80%89%E6%8B%A9%E6%9C%80%E4%BD%B3%E7%9A%84%E8%A1%8C%E5%8A%A8%E5%8F%B7%E5%8F%AC" class="hash-link" aria-label="技巧 #05：选择最佳的行动号召的直接链接" title="技巧 #05：选择最佳的行动号召的直接链接">​</a></h2>
<p>作为开发者，我们往往忽视向用户显示的文本的关键重要性。</p>
<p>因为在代码中设置一个字符串非常容易，我们往往把注意力集中在更难的任务上，比如编写漂亮的视觉效果，带有漂亮的渐变和动画。</p>
<p>但对于我们的用户来说，情况正好相反：我们向他们展示的文本在他们体验我们应用的过程中扮演着重要角色！</p>
<p>这对于付费墙尤为真实，因此你确实希望进行实验，看看哪个副本效果最好。</p>
<p>而一个很好的起点是“呼吁行动”，即用户点击以进行购买的按钮。</p>
<p>例如，在这两个按钮之间，有一个更可能表现更好：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/c5b84e6f-300e-4f47-96c2-7dd0ce05f99e/Screenshot+2023-11-25+at+21.27.42.png?content-type=image%2Fpng&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-06选择正确的主横幅">技巧 #06：选择正确的主横幅<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-06%E9%80%89%E6%8B%A9%E6%AD%A3%E7%A1%AE%E7%9A%84%E4%B8%BB%E6%A8%AA%E5%B9%85" class="hash-link" aria-label="技巧 #06：选择正确的主横幅的直接链接" title="技巧 #06：选择正确的主横幅的直接链接">​</a></h2>
<p>“英雄”是你经常在付费墙顶部看到的横幅。</p>
<p>它是付费墙的重要部分，因为它有助于设置特定的情绪。</p>
<p>就像与付费墙相关的一切一样，你确实想进行实验，看看什么样的图像表现最好。</p>
<p>正如你所看到的，一些应用对其英雄横幅非常有创意：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/d7d20b30-cf4a-43fc-92ca-07164d307fe7/unnamed-2.gif?content-type=image%2Fgif&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-07不要害怕进行大量本地化">技巧 #07：不要害怕进行大量本地化<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-07%E4%B8%8D%E8%A6%81%E5%AE%B3%E6%80%95%E8%BF%9B%E8%A1%8C%E5%A4%A7%E9%87%8F%E6%9C%AC%E5%9C%B0%E5%8C%96" class="hash-link" aria-label="技巧 #07：不要害怕进行大量本地化的直接链接" title="技巧 #07：不要害怕进行大量本地化的直接链接">​</a></h2>
<p>付费墙是你应用的销售人员。</p>
<p>销售人员在所在地区的行为是不同的。</p>
<p>因此，同一个付费墙在应用可用的所有地区都是最佳表现者的可能性很小！</p>
<p>你需要创建特定于特定文化和语言的特定付费墙。</p>
<p>用户测试是从本地用户获得反馈的好方法：如果你已经有一个稳定的用户社区，请毫不犹豫地利用它！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="技巧-08建立信任">技巧 #08：建立信任<a href="https://goswiftui.com/blog/2023/11/30/8-tips-to-design-a-great-paywall#%E6%8A%80%E5%B7%A7-08%E5%BB%BA%E7%AB%8B%E4%BF%A1%E4%BB%BB" class="hash-link" aria-label="技巧 #08：建立信任的直接链接" title="技巧 #08：建立信任的直接链接">​</a></h2>
<p>我们都曾不得不在某个时候处理过一个令人讨厌的订阅，最终证明取消订阅是一件麻烦的事情。</p>
<p>你不希望给用户一种被欺诈的感觉，因此任何有助于建立信任的策略都有可能提高转化率。</p>
<p>这样的策略的一个很好的例子是一个允许用户选择接收推送通知以提醒他们试用期结束的付费墙：</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/63139bb1e1a1a078e071f30c/6d39ec8a-a361-473c-ab11-2e50a4886010/unnamed-6.png?content-type=image%2Fpng&amp;format=750w" alt="付费墙" class="img_ev3q"></p>
<p>这就是我本周想与你分享的设计出色付费墙的 8 个技巧！</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.youtube.com/watch?v=4nj0mVE3R08" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=4nj0mVE3R08</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>paywall</category>
        </item>
        <item>
            <title><![CDATA[SwiftUI数字变化动画：iOS 17新功能教程]]></title>
            <link>https://goswiftui.com/blog/2023/11/27/animating-number-changes-in-swiftui</link>
            <guid>https://goswiftui.com/blog/2023/11/27/animating-number-changes-in-swiftui</guid>
            <pubDate>Mon, 27 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[在iOS 17中，SwiftUI引入了一种内置方法，通过 .contentTransition(.numericText()) 实现数字动画。学习如何在SwiftUI中应用这一新功能，呈现出美丽的数字变化动画。]]></description>
            <content:encoded><![CDATA[<p>iOS 17 带来了 SwiftUI 中一种新的方式来实现漂亮的数字动画。让我们学习如何做到这一点。</p>
<p><strong>在 iOS 17 之前</strong>，如果你尝试在 SwiftUI 中实现数字动画，你将得到一个简单的淡入/淡出动画。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">spacing</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">20</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">number</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Button</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                withAnimation </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    number </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">..&lt;</span><span class="token plain"> </span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> label</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"随机"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">font</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">largeTitle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>这是你会得到的：一个淡入淡出的动画。</p>
<p><img decoding="async" loading="lazy" src="https://sarunw.com/images/animating-number-changes-in-swiftui-old.gif" alt="在iOS 16中实现数字变化动画。" class="img_ev3q">在 iOS 16 中实现数字变化动画。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="在-ios-17-中如何实现数字变化动画">在 iOS 17 中如何实现数字变化动画<a href="https://goswiftui.com/blog/2023/11/27/animating-number-changes-in-swiftui#%E5%9C%A8-ios-17-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%97%E5%8F%98%E5%8C%96%E5%8A%A8%E7%94%BB" class="hash-link" aria-label="在 iOS 17 中如何实现数字变化动画的直接链接" title="在 iOS 17 中如何实现数字变化动画的直接链接">​</a></h2>
<p><strong>在 iOS 17 中</strong>，SwiftUI 提供了一种内置的方法来实现数字动画。</p>
<p>效果如下图所示。</p>
<p><img decoding="async" loading="lazy" src="https://sarunw.com/images/animating-number-changes-in-swiftui-new.gif" alt="在iOS 17中实现数字变化动画。" class="img_ev3q">在 iOS 17 中实现数字变化动画。</p>
<p>要在 iOS 17 中实现数字动画，我们在文本视图上应用<code>.contentTransition(.numericText())</code>即可。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> number</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Int</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">spacing</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">20</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">number</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">contentTransition</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">numericText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Button</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                withAnimation </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    number </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">..&lt;</span><span class="token plain"> </span><span class="token number">200</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> label</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"随机"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">font</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">largeTitle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>要享受这个美丽的动画，我们需要做的唯一一件事就是使用<code>.contentTransition</code>修饰符并使用<code>numericText()</code>过渡。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://sarunw.com/posts/animating-number-changes-in-swiftui/" target="_blank" rel="noopener noreferrer">https://sarunw.com/posts/animating-number-changes-in-swiftui/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>swift</category>
            <category>iOS17</category>
        </item>
        <item>
            <title><![CDATA[SwiftUI 不需要权限访问用户照片]]></title>
            <link>https://goswiftui.com/blog/2023/11/13/swiftui-displaying-a-photo-picker</link>
            <guid>https://goswiftui.com/blog/2023/11/13/swiftui-displaying-a-photo-picker</guid>
            <pubDate>Mon, 13 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[你知道吗，Apple 创造了一种 SwiftUI 可以在不请求权限的情况下访问用户照片的方法，而且仍然确保了用户的隐私吗？]]></description>
            <content:encoded><![CDATA[<p>你知道吗，Apple 新增了 SwiftUI 可以在不请求权限的情况下访问用户照片的方式，并仍然确保用户隐私？我们将讨论这是如何实现的，以及你如何在自己的项目中使用它。</p>
<p><img decoding="async" loading="lazy" src="https://miro.medium.com/v2/resize:fit:1050/1*TzEgvuo17bT95aOJj1IuRg.png" alt="内置照片选择器在 iOS 模拟器上运行的屏幕截图，等待我们选择要选择的照片" class="img_ev3q"></p>
<p>Apple 鼓励开发者在其应用程序 "仅需要只读访问以检索图像以在互联网上共享或嵌入在文档或电子邮件中" 的情况下使用内置选择器，并表示 "由于系统在一个单独的进程中管理其生命周期，因此它默认是私有的。用户无需明确授权您的应用程序选择照片，这导致用户体验更简单和流畅。详见下面官方文档：</p>
<ul>
<li>
<p><a href="https://developer.apple.com/documentation/photokit/delivering_an_enhanced_privacy_experience_in_your_photos_app?source=post_page-----2531c06d5209--------------------------------#3695529" target="_blank" rel="noopener noreferrer">https://developer.apple.com/documentation/photokit/delivering_an_enhanced_privacy_experience_in_your_photos_app?source=post_page-----2531c06d5209--------------------------------#3695529</a></p>
</li>
<li>
<p><a href="https://developer.apple.com/documentation/photokit/bringing_photos_picker_to_your_swiftui_app?source=post_page-----2531c06d5209--------------------------------" target="_blank" rel="noopener noreferrer">https://developer.apple.com/documentation/photokit/bringing_photos_picker_to_your_swiftui_app?source=post_page-----2531c06d5209--------------------------------</a></p>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="为何更加隐私">为何更加隐私<a href="https://goswiftui.com/blog/2023/11/13/swiftui-displaying-a-photo-picker#%E4%B8%BA%E4%BD%95%E6%9B%B4%E5%8A%A0%E9%9A%90%E7%A7%81" class="hash-link" aria-label="为何更加隐私的直接链接" title="为何更加隐私的直接链接">​</a></h2>
<p>如果我们请求访问用户的照片库，那将赋予我们的应用程序访问用户库中所有照片的权限。使用下面的方法，我们的应用程序只能访问用户明确选择放入我们的应用程序的特定照片。这对于我们作为开发者来说非常好，因为它只提供我们应用程序所需的照片，对用户来说也很好，因为他们可以放心，知道口袋里的应用程序不会偷窥他们的所有照片 🧟‍♂️。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="在-swiftui-中访问用户的照片">在 SwiftUI 中访问用户的照片<a href="https://goswiftui.com/blog/2023/11/13/swiftui-displaying-a-photo-picker#%E5%9C%A8-swiftui-%E4%B8%AD%E8%AE%BF%E9%97%AE%E7%94%A8%E6%88%B7%E7%9A%84%E7%85%A7%E7%89%87" class="hash-link" aria-label="在 SwiftUI 中访问用户的照片的直接链接" title="在 SwiftUI 中访问用户的照片的直接链接">​</a></h2>
<p>在下面的示例中，我们创建了一个视图模型和一个视图来处理内置的照片选择器。</p>
<p>从下面的 PhotosPicker API 中有几点需要注意的地方，首先是我们限制用户只能选择图像，这是我们示例的需求。我们还设置了用户可以选择的照片的最大数量。例如，如果我们想要使用此代码允许用户选择个人资料照片（或一次仅选择单个图像），我们将限制为 1。我们还要求返回的照片与用户选择它们的顺序相同，这是 API 的良好用户体验功能。</p>
<p>在我们的视图模型中，我们创建了一对数组，一个用于保存我们想要显示的图像，另一个用于保存从照片选择器中选择的对象。将这两个设置为两个不同的数组很重要，因为照片选择器并不总是仅限于照片。这带我们来到视图模型的最后一部分，我们的函数将照片选择器的选择尝试转换为图像。在我们的用例中，我们希望每次用户点击按钮时都重置选择的照片和先前选择的图像。如果您不想或不需要在代码中重置这些值，可以从该函数中删除对 "*.removeAll()" 的两个调用。我们还检查确保 selectedPhotos 数组不为空，以便我们不会浪费时间启动不需要的任务。如果数组不为空，我们将尝试将 selectedPhotos 中的数据转换为图像数组，然后将这些图像添加到图像数组中。</p>
<p>请注意，即使我们在 LazyHGrid 中显示照片，这似乎并不是一种性能良好的显示图像的方式。使用下面的代码，我们的内存使用量随着每张照片的增加而迅速增加。这在使照片选择器工作的情况下也是不需要的，但包含在本教程中，以便您可以测试自己的代码，并确保其在项目中正常工作。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">SwiftUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">PhotosUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">class</span><span class="token plain"> </span><span class="token class-name">PhotoSelectorViewModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">ObservableObject</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@Published</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> images </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">UIImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@Published</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> selectedPhotos </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">PhotosPickerItem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@MainActor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">convertDataToImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// reset the images array before adding more/new photos</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        images</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">removeAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token operator">!</span><span class="token plain">selectedPhotos</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">isEmpty </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> eachItem </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> selectedPhotos </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token class-name">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> imageData </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token operator">?</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> eachItem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">loadTransferable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">type</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> image </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">UIImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> imageData</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                            images</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">image</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// uncheck the images in the system photo picker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        selectedPhotos</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">removeAll</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">PhotoSelectorView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@StateObject</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> vm </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">PhotoSelectorViewModel</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> maxPhotosToSelect </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">ScrollView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">horizontal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token class-name">LazyHGrid</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">rows</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">GridItem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">fixed</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">300</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token class-name">ForEach</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token plain">vm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">images</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> index </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                        </span><span class="token class-name">Image</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">uiImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> vm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">images</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">resizable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">scaledToFit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">PhotosPicker</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                selection</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $vm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">selectedPhotos</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// holds the selected photos from the picker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                maxSelectionCount</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> maxPhotosToSelect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// sets the max number of photos the user can select</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                selectionBehavior</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">ordered</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ensures we get the photos in the same order that the user selected them</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                matching</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">images </span><span class="token comment" style="color:rgb(98, 114, 164)">// filter the photos library to only show images</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// this label changes the text of photo to match either the plural or singular case based on the value in maxPhotosToSelect</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token class-name">Label</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Select up to ^[</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">maxPhotosToSelect</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)"> photo](inflect: true)"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> systemImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"photo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">onChange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">of</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> vm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">selectedPhotos</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token omit keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token omit keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            vm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">convertDataToImage</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token other-directive property">#Preview</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token class-name">PhotoSelectorView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://medium.com/@jpmtech/swiftui-displaying-a-photo-picker-2531c06d5209" target="_blank" rel="noopener noreferrer">https://medium.com/@jpmtech/swiftui-displaying-a-photo-picker-2531c06d5209</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>swift</category>
            <category>Photo Picker</category>
        </item>
        <item>
            <title><![CDATA[如何在SwiftUI中关闭键盘]]></title>
            <link>https://goswiftui.com/blog/2023/11/04/dismiss-keyboard-in-swiftui</link>
            <guid>https://goswiftui.com/blog/2023/11/04/dismiss-keyboard-in-swiftui</guid>
            <pubDate>Sat, 04 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[在iOS 15中，SwiftUI引入了一种本地方法，使用新的属性包装器@FocusState和focused(_:)修改器来以编程方式关闭键盘。]]></description>
            <content:encoded><![CDATA[<p>如何在 SwiftUI 中关闭键盘</p>
<p>了解如何在 SwiftUI 中以编程方式关闭键盘。</p>
<p>在 iOS 15 中，SwiftUI 引入了一种本地方法，使用新的属性包装器<a href="https://developer.apple.com/documentation/swiftui/focusstate" target="_blank" rel="noopener noreferrer"><code>@FocusState</code></a>和<a href="https://developer.apple.com/documentation/swiftui/view/focused(_:)" target="_blank" rel="noopener noreferrer"><code>focused(_:)</code></a>修改器来以编程方式关闭键盘。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何在-swiftui-中以编程方式关闭键盘">如何在 SwiftUI 中以编程方式关闭键盘<a href="https://goswiftui.com/blog/2023/11/04/dismiss-keyboard-in-swiftui#%E5%A6%82%E4%BD%95%E5%9C%A8-swiftui-%E4%B8%AD%E4%BB%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E5%85%B3%E9%97%AD%E9%94%AE%E7%9B%98" class="hash-link" aria-label="如何��在 SwiftUI 中以编程方式关闭键盘的直接链接" title="如何在 SwiftUI 中以编程方式关闭键盘的直接链接">​</a></h2>
<p>键盘的显示和隐藏基于文本字段的焦点状态。</p>
<ul>
<li>当文本字段获得焦点时，键盘将显示。</li>
<li>当文本字段失去焦点时，键盘将消失。</li>
</ul>
<p>要关闭键盘，我们需要能够控制文本字段的焦点。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何控制焦点状态">如何控制焦点状态<a href="https://goswiftui.com/blog/2023/11/04/dismiss-keyboard-in-swiftui#%E5%A6%82%E4%BD%95%E6%8E%A7%E5%88%B6%E7%84%A6%E7%82%B9%E7%8A%B6%E6%80%81" class="hash-link" aria-label="如何控制焦点状态的直接链接" title="如何控制焦点状态的直接链接">​</a></h2>
<p>我们可以使用<a href="https://developer.apple.com/documentation/swiftui/view/focused(_:)" target="_blank" rel="noopener noreferrer"><code>focused(_:)</code></a>修改器来监听和控制特定输入的焦点状态。</p>
<p>此修改器需要一个名为<a href="https://developer.apple.com/documentation/swiftui/focusstate" target="_blank" rel="noopener noreferrer"><code>FocusState</code></a>的特殊类型来绑定焦点状态。</p>
<p>以下是一个示例，其中我们在“登录”按钮被点击时隐藏键盘。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@State</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> username </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@FocusState</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> isFocused</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Bool</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">VStack</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token comment" style="color:rgb(98, 114, 164)">// 2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"用户名"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $username</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">focused</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">$isFocused</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Button</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"登录"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                isFocused </span><span class="token operator">=</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>1 我们创建了一个<code>@FocusState</code>变量，用于与文本字段的焦点状态绑定。 2 我们使用<code>.focused($isFocused)</code>修改器绑定焦点状态。 3 为了关闭键盘，我们通过将焦点状态设置为<code>false</code>来取消文本字段的焦点，<code>isFocused = false</code>。</p>
<p>当点击文本字段时：</p>
<ol>
<li>它将获得焦点。</li>
<li><code>isFocused</code>将变为<code>true</code>。</li>
<li>键盘将显示。</li>
</ol>
<p>当我们将<code>isFocused</code>重新设置为<code>false</code>时：</p>
<ol>
<li>文本字段放弃焦点。</li>
<li>键盘将关闭。</li>
</ol>
<p><img decoding="async" loading="lazy" src="https://sarunw.com/images/dismiss-keyboard-in-swiftui-demo.gif" alt="使用isFocused以编程方式关闭键盘。" class="img_ev3q"></p>
<p>使用<code>isFocused</code>以编程方式关闭键盘。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://sarunw.com/posts/dismiss-keyboard-in-swiftui/" target="_blank" rel="noopener noreferrer">https://sarunw.com/posts/dismiss-keyboard-in-swiftui/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>键盘</category>
        </item>
        <item>
            <title><![CDATA[如何在SwiftUI中请求用户对您的应用进行评价]]></title>
            <link>https://goswiftui.com/blog/2023/11/04/how-to-request-users-to-review-app-in-swiftui</link>
            <guid>https://goswiftui.com/blog/2023/11/04/how-to-request-users-to-review-app-in-swiftui</guid>
            <pubDate>Sat, 04 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[SwiftUI提供了一种本地方法来请求用户的反馈和应用评分。了解如何在SwiftUI中请求用户对您的应用进行评价，以及限制和最佳实践。]]></description>
            <content:encoded><![CDATA[<p>在 iOS 16 中，SwiftUI 具有一种本地方式来请求用户的反馈和评分。</p>
<p>要呈现一个本地提示，请求用户对您的应用进行 App Store 评分和评论，您需要执行两项操作。</p>
<ol>
<li>导入<code>StoreKit</code>框架。</li>
<li>当您希望请求用户对您的应用进行评价时，调用<code>RequestReviewAction</code>。</li>
</ol>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">SwiftUI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">StoreKit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@Environment</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">requestReview</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> requestReview</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"你好，世界！"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">onAppear </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)">// 2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token function" style="color:rgb(80, 250, 123)">requestReview</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ol>
<li><code>RequestReviewAction</code>是一个操作，将呈现一个提示，要求用户为我们的应用评分。我们可以从<code>StoreKit</code>框架中声明的环境值<code>\.requestReview</code>中获取该操作。</li>
<li>在获得对这个操作的访问权限后，只需在希望请求用户评价时调用它。</li>
</ol>
<p>这是 UI 的样子。</p>
<p><img decoding="async" loading="lazy" src="https://sarunw.com/images/how-to-request-users-to-review-app-in-swiftui.png" alt="请求评价弹出对话框。" class="img_ev3q">请求评价弹出对话框。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="限制">限制<a href="https://goswiftui.com/blog/2023/11/04/how-to-request-users-to-review-app-in-swiftui#%E9%99%90%E5%88%B6" class="hash-link" aria-label="限制的直接链接" title="限制的直接链接">​</a></h2>
<p>苹果在用户体验方面非常认真，他们希望控制我们请求用户评价的频率。</p>
<p>因此，即使您明确调用<code>requestReview()</code>，评价弹出窗口也可能不会显示。</p>
<p>这是苹果用来决定是否显示评价窗口的标准。</p>
<ol>
<li>如果用户在该设备上尚未对您的应用进行评级或评论，则 StoreKit 在 365 天内最多会显示评级和评论请求三次。</li>
<li>如果用户在该设备上对您的应用进行了评级或评论，并且自上次评价以来已经过去了 365 天，StoreKit 会显示评级和评论请求。</li>
<li>即使所有标准都满足，由于苹果的隐藏标准，例如频率，仍有可能不显示提示，因此不要在按钮点击或其他用户操作的响应中调用该方法。</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="何时请求评级">何时请求评级<a href="https://goswiftui.com/blog/2023/11/04/how-to-request-users-to-review-app-in-swiftui#%E4%BD%95%E6%97%B6%E8%AF%B7%E6%B1%82%E8%AF%84%E7%BA%A7" class="hash-link" aria-label="何时请求评级的直接链接" title="何时请求评级的直接链接">​</a></h2>
<p>由于您可以请求评价的次数有限，您应该在有意义的时候调用它。</p>
<p>您可能希望在用户可能会获得评价的时候要求评价。</p>
<p>这方面没有固定的规则，但我可以提供一些示例。</p>
<ol>
<li>当用户反复返回您的应用时。这表明用户对您的应用感到满意并认为它有帮助。</li>
<li>在重要事件之后，例如完成游戏关卡或完成一些任务。</li>
</ol>
<p>总之，您应该在用户对您的应用感到积极时请求评价。</p>
<p>因此，您的代码可能如下所示。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token class-name">ContentView</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@Environment</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">\</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">requestReview</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> requestReview</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> body</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">some</span><span class="token plain"> </span><span class="token class-name">View</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token class-name">Text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"你好，世界！"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">padding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">onAppear </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token function" style="color:rgb(80, 250, 123)">requestReviewIfAppropriated</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token attribute atrule">@MainActor</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">requestReviewIfAppropriated</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> numberOfVisits </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> numberOfSignificantEvents </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> numberOfVisits </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token operator">||</span><span class="token plain"> numberOfSignificantEvents </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">5</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token function" style="color:rgb(80, 250, 123)">requestReview</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>实际上，<code>numberOfVisits</code>和<code>numberOfSignificantEvents</code>应该来自您的数据库，即<code>UserDefaults</code>。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://sarunw.com/posts/how-to-request-users-to-review-app-in-swiftui/" target="_blank" rel="noopener noreferrer">https://sarunw.com/posts/how-to-request-users-to-review-app-in-swiftui/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>评价</category>
        </item>
        <item>
            <title><![CDATA[Xcode 15：2023年值得使用的 OSLog 新特性]]></title>
            <link>https://goswiftui.com/blog/2023/07/29/why-you-should-use-oslog-in-2023</link>
            <guid>https://goswiftui.com/blog/2023/07/29/why-you-should-use-oslog-in-2023</guid>
            <pubDate>Sat, 29 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[在2023年，Xcode 15带来了新功能，支持**结构化日志**，让使用OSLog变得更加值得推荐。现在可以通过筛选功能在调试控制台中只看到来自自己应用程序的日志，还能高亮显示警告和错误。对于需要更多信息的情况，只需按一下相应日志行即可。然而，需要注意结构化日志仅适用于iOS 17及以上版本，但对于早期版本，仍可使用旧的`os_log`。配置日志记录器时，习惯上使用应用程序标识符作为子系统，模块名作为类别。整体上，这些改进使得OSLog在技术文章中更加实用。]]></description>
            <content:encoded><![CDATA[<p>在 2023 年，Xcode 15 带来了新功能，支持<strong>结构化日志</strong>，让使用 OSLog 变得更加值得推荐。现在可以通过筛选功能在调试控制台中只看到来自自己应用程序的日志，还能高亮显示警告和错误。对于需要更多信息的情况，只需按一下相应日志行即可。然而，需要注意结构化日志仅适用于 iOS 17 及以上版本，但对于早期版本，仍可使用旧的<code>os_log</code>。配置日志记录器时，习惯上使用应用程序标识符作为子系统，模块名作为类别。整体上，这些改进使得 OSLog 在技术文章中更加实用。</p>
<p>OSLog 是一个长期可用的统一日志框架，但我一直没有大量采用它。但随着 WWDC 2023 的新功能，情况即将发生改变。</p>
<p>Xcode 15（目前为测试版）在调试控制台中支持<strong>结构化日志</strong>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="目前日志记录存在的问题">目前日志记录存在的问题<a href="https://goswiftui.com/blog/2023/07/29/why-you-should-use-oslog-in-2023#%E7%9B%AE%E5%89%8D%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98" class="hash-link" aria-label="目前日志记录存在的问题的直接链接" title="目前日志记录存在的问题的直接链接">​</a></h2>
<p>目前，我的 Xcode 14 调试控制台中充斥着太多日志，来自其他框架甚至操作系统本身！</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token number">2023</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">25</span><span class="token plain"> </span><span class="token number">14</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">39</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">38.819584</span><span class="token operator">+</span><span class="token number">0800</span><span class="token plain"> </span><span class="token class-name">MyApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">12</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">34</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">WC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token class-name">WCSession</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">is</span><span class="token plain"> not paired</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token number">2023</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">25</span><span class="token plain"> </span><span class="token number">14</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">39</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">38.819834</span><span class="token operator">+</span><span class="token number">0800</span><span class="token plain"> </span><span class="token class-name">MyApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">12</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">34</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token constant" style="color:rgb(189, 147, 249)">WC</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">-</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">WCSession</span><span class="token plain"> onqueue_handleUpdateSessionState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">_block_invoke dropping </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> pairingIDs no longer match</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">pairingID</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> client pairingID</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">null</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token number">2023</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">25</span><span class="token plain"> </span><span class="token number">14</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">39</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">38.997445</span><span class="token operator">+</span><span class="token number">0800</span><span class="token plain"> </span><span class="token class-name">MyApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">34</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">56</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">MediaRemote</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">ConcreteOutputContext</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">WARNING</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(189, 147, 249)">AVF</span><span class="token plain"> context unavailable </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> </span><span class="token operator">+</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">MRAVConcreteOutputContext</span><span class="token plain"> sharedAudioPresentationContext</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain">_block_invoke</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token number">2023</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">25</span><span class="token plain"> </span><span class="token number">14</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">39</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">49.499876</span><span class="token operator">+</span><span class="token number">0800</span><span class="token plain"> </span><span class="token class-name">MyApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">56</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">78</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token number">9.6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">FirebaseAnalytics</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">I</span><span class="token operator">-</span><span class="token plain">ACS023007</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token class-name">Analytics</span><span class="token plain"> v</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token number">9.6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token number">0</span><span class="token plain"> started</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token number">2023</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">25</span><span class="token plain"> </span><span class="token number">14</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">39</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">49.889278</span><span class="token operator">+</span><span class="token number">0800</span><span class="token plain"> </span><span class="token class-name">MyApp</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">56</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token number">78</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token number">9.6</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token number">0</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">FirebaseAnalytics</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">I</span><span class="token operator">-</span><span class="token plain">ACS023008</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token class-name">To</span><span class="token plain"> enable debug logging </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">set</span><span class="token plain"> the following application argument</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token operator">-</span><span class="token class-name">FIRAnalyticsDebugEnabled</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">see http</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token operator">//</span><span class="token plain">goo</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">gl</span><span class="token operator">/</span><span class="token class-name">RfcP7r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>太多的噪音。</p>
<p>我已经尝试过<a href="https://samwize.com/2022/10/29/reduce-xcode-debugger-logs/" target="_blank" rel="noopener noreferrer">如何减少调试日志</a>，但这需要额外的步骤。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="xcode-15-的解决方案">Xcode 15 的解决方案<a href="https://goswiftui.com/blog/2023/07/29/why-you-should-use-oslog-in-2023#xcode-15-%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" class="hash-link" aria-label="Xcode 15 的解决方案的直接链接" title="Xcode 15 的解决方案的直接链接">​</a></h2>
<p>Xcode 15 添加了筛选功能，因此我可以只看到来自我的应用程序的日志（筛选子系统）。它甚至用黄色突出显示警告和用红色突出显示错误。</p>
<p><img decoding="async" loading="lazy" src="https://samwize.com/images/xcode-15-logging-4.jpg" alt="img" class="img_ev3q"></p>
<p>当然，您也可以按类别或消息进行筛选。</p>
<p>我还喜欢将视图配置为不显示其他元数据，以便每个日志都只有一行。</p>
<p><img decoding="async" loading="lazy" src="https://samwize.com/images/xcode-15-logging-config.png" alt="img" class="img_ev3q"></p>
<p>然后，当您希望查看更多信息时，可以按一下行上的空格。</p>
<p><img decoding="async" loading="lazy" src="https://samwize.com/images/xcode-15-logging-3.jpg" alt="img" class="img_ev3q"></p>
<p>您甚至可以使用 CMD + OPT + SHIFT + J 进行<strong>跳转到源代码</strong>。</p>
<p>很棒！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="仅适用于-ios-17">仅适用于 iOS 17<a href="https://goswiftui.com/blog/2023/07/29/why-you-should-use-oslog-in-2023#%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E-ios-17" class="hash-link" aria-label="仅适用于 iOS 17的直接链接" title="仅适用于 iOS 17的直接链接">​</a></h2>
<p>即使您在 Xcode 15 上运行，需要注意结构化日志仅适用于 iOS 17（测试版）。在 iOS 16 上运行将像使用<em>print</em>一样显示日志。不过，您仍然可以打开“Console”应用程序来查看它的完整效果。</p>
<p>另外，<code>Logger</code>类在 iOS 14 中引入。如果您支持任何更早的 iOS 版本，仍然可以使用旧的<code>os_log</code>。</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="如何记录日志">如何记录日志<a href="https://goswiftui.com/blog/2023/07/29/why-you-should-use-oslog-in-2023#%E5%A6%82%E4%BD%95%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97" class="hash-link" aria-label="如何记录日志的直接链接" title="如何记录日志的直接链接">​</a></h2>
<p>通常，我会在扩展中设置所有的日志记录器。按照惯例，子系统是您的应用程序标识符，而类别是您的模块名。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">OSLog</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Logger</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">private</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> appIdentifier </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Bundle</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">main</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bundleIdentifier </span><span class="token operator">??</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> main </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">subsystem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> appIdentifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> category</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"main"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">static</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> camera </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">Logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">subsystem</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> appIdentifier</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> category</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"camera"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>使用时，您可以简单地调用<code>Logger.camera.info(...)</code>。</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://samwize.com/2023/07/25/why-you-should-use-oslog-in-2023" target="_blank" rel="noopener noreferrer">https://samwize.com/2023/07/25/why-you-should-use-oslog-in-2023</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>Xcode</category>
            <category>OSLog</category>
        </item>
        <item>
            <title><![CDATA[Swift 中正确判断字符串是否为空的方法]]></title>
            <link>https://goswiftui.com/blog/2023/07/19/bad-practice-testing-if-a-string-is-empty</link>
            <guid>https://goswiftui.com/blog/2023/07/19/bad-practice-testing-if-a-string-is-empty</guid>
            <pubDate>Wed, 19 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[【Swift编程技巧】避免使用字符串计数(count)来测试字符串是否为空，而是使用内置属性isEmpty，因为计数方法耗时且效率低下。]]></description>
            <content:encoded><![CDATA[<p>这段代码看起来似乎没有什么问题，对吧？</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/a1591ad2-48f1-4362-9af2-253a7af06865/%E2%80%8EisEmpty+Images.%E2%80%8E001.png" alt="img" class="img_ev3q"></p>
<p>然而，实际上它隐藏了一个相当严重的问题！</p>
<p>现在我们来理解一下这个问题是什么。</p>
<p>这段代码的目的非常明确：我们正在检查<code>myString</code>是否为空。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/3218110e-b97a-4674-a7ea-86ecd9fe5bb4/%E2%80%8EisEmpty+Images.%E2%80%8E002.png" alt="img" class="img_ev3q"></p>
<p>事实证明，Swift 还提供了一个内置属性来实现这个目的，叫做<code>isEmpty</code>。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/2d11a02c-c486-49e6-b533-28a1915d60ae/%E2%80%8EisEmpty+Images.%E2%80%8E003.png" alt="img" class="img_ev3q"></p>
<p>而这种第二种方法要好得多！</p>
<p>那么这两种方法有什么区别呢？</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/41944279-e6c5-4f02-b3d1-3bf5e09a53d8/%E2%80%8EisEmpty+Images.%E2%80%8E004.png" alt="img" class="img_ev3q"></p>
<p>当我们调用<code>isEmpty</code>时，在底层 Swift 只需要检查字符串是否至少包含一个字符：这是非常快速的执行过程。</p>
<p>而且更好的是，这个执行时间不取决于字符串的长度。</p>
<p>另一方面，属性<code>count</code>的工作方式非常不同。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/76684b1c-445c-4793-a6b8-dfc4e904983b/%E2%80%8EisEmpty+Images.%E2%80%8E005.png" alt="img" class="img_ev3q"></p>
<p><code>count</code>将返回字符串中可见字符的数量。</p>
<p>由于一些 Unicode 字符可以组合成一个单独的可见字符，这意味着 count 必须遍历字符串中的所有字符。</p>
<p>因此，如果字符串很长，或者有很多字符串，这段代码将需要很长时间来执行。</p>
<p>这就是这段代码背后的大问题！</p>
<p>所以记住，每当你需要测试一个字符串是否为空时，绝对不要手动测试它的 count 是否大于零，因为这样做会很慢！</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/21292c6f-0d67-4b4b-8d79-fd412b6c5dc7/isEmpty.gif" alt="img" class="img_ev3q"></p>
<p>这篇文章就到这里，希望你喜欢这种新的格式！</p>
<p>如果你想要尝试这段代码，这里是它的样例：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> myString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// `myString`不为空</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> myString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">isEmpty </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// `myString`不为空</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.swiftwithvincent.com/blog/bad-practice-testing-if-a-string-is-empty" target="_blank" rel="noopener noreferrer">https://www.swiftwithvincent.com/blog/bad-practice-testing-if-a-string-is-empty</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>isEmpty</category>
            <category>Swift</category>
        </item>
        <item>
            <title><![CDATA[Swift5.9 和 Xcode15 中的新功能]]></title>
            <link>https://goswiftui.com/blog/2023/06/8/new-features-in-Swift5.9-and-Xcode15</link>
            <guid>https://goswiftui.com/blog/2023/06/8/new-features-in-Swift5.9-and-Xcode15</guid>
            <pubDate>Thu, 08 Jun 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[介绍了Xcode 15的一些新功能, 其中包括条件编译时代码的自动灰显、代码书签的添加、创建类型安全的资源标识符、预览的改进、if和switch语句作为表达式的使用以及Swift宏的支持。]]></description>
            <content:encoded><![CDATA[<p>多棒的主题演讲！</p>
<p>如果 Vision Pro 能够兑现承诺，我们可能即将迎来一些非常令人兴奋的时刻，就像 15 年前发布原始 iPhone 时一样 🤩</p>
<p>但我相信你已经听说了主题演讲中宣布的所有信息。所以我就不再多说了。</p>
<p>相反，我一旦有机会，就立刻安装了 Xcode 15，并开始探索寻找所有我能找到的酷炫新功能！</p>
<p>现在我想与你分享我的发现 😌</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/748b03a9-a7de-4faf-b5a0-86a1773b4972/Screen+Recording+2023-06-06+at+00.04.28.gif?format=2500w" alt="img" class="img_ev3q"></p>
<p>让我们从这个简单而实用的功能开始：在使用条件编译时，不匹配当前目标的代码将被 Xcode 自动变为灰色。</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/4c0baaae-9afb-4db6-b7d5-dd963deea413/Screen+Recording+2023-06-06+at+01.38.28.gif?format=2500w" alt="img" class="img_ev3q"></p>
<p>另一个非常酷的生活质量改进是添加了代码书签。</p>
<p>如果像我一样，你曾经设置禁用断点来跟踪代码中的特定位置，那么这种变通方法很快就会成为过去的事情 👌</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/eb7de4fd-bbfb-447f-956e-78e92581e68c/Screen%2BRecording%2B2023-06-06%2Bat%2B00.41.51.gif?format=1500w" alt="img" class="img_ev3q"></p>
<p>Xcode 15 还首次支持了一个非常有用的功能：为存储在 AssetCatalog 中的资源创建类型安全的标识符。</p>
<p>我相信很多人目前正在使用 SwiftGen 来实现这个目的。</p>
<p>从我所了解的情况来看，这个新功能甚至与较旧版本的 iOS 向后兼容！</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/21a8c074-1a11-4749-92ff-fed549880559/Screen+Recording+2023-06-06+at+00.21.58.gif?format=2500w" alt="img" class="img_ev3q"></p>
<p>预览功能也得到了很大改进！</p>
<p>首先，生成预览的代码现在要简单得多，得益于新的 Swift 宏“#Preview”的使用。</p>
<p>更好的是：预览现在也适用于 UIKit 和 AppKit！</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/88d6c588-d672-4d0b-870f-afb1fb9438d1/Fx5JbemaYAA73Ub-2.png?format=1500w" alt="img" class="img_ev3q"></p>
<p>Swift 5.9 带来了一个简单的新功能，我特别喜欢：现在可以将“if”和“switch”用作表达式！</p>
<p><img decoding="async" loading="lazy" src="https://images.squarespace-cdn.com/content/v1/63139bb1e1a1a078e071f30c/7124ead6-219b-4d44-aa09-fffa659fbe1d/Fx5ZdmBaIAA4bt6-2.jpeg?format=1500w" alt="img" class="img_ev3q"></p>
<p>最后，还有一个令我非常兴奋的新增功能：对 Swift 宏的支持。</p>
<p>我还没有太多机会尝试宏（某些时候，你必须要睡觉一下 🤪），但我对它们带来的所有可能性感到非常兴奋！</p>
<p>简而言之，宏是在编译时调用的小型 Swift 程序，能够生成新的源代码。</p>
<p>你可以将它们想象成基本上提供了与 Sourcery 相同的可能性，但这次直接内置在语言中。</p>
<p>Apple 分享了一些使用宏的示例，比如上面的示例，其中宏@CaseDetection 自动生成了用于测试一个值是否对应给定情况的属性 👌</p>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.swiftwithvincent.com/newsletter/there-are-so-many-cool-new-features-in-swift-and-xcode" target="_blank" rel="noopener noreferrer">https://www.swiftwithvincent.com/newsletter/there-are-so-many-cool-new-features-in-swift-and-xcode</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>xcode</category>
            <category>Swift</category>
        </item>
        <item>
            <title><![CDATA[用代码示例解释 Swift 中的 Ranges]]></title>
            <link>https://goswiftui.com/blog/2023/05/17/swift-ranges-explained</link>
            <guid>https://goswiftui.com/blog/2023/05/17/swift-ranges-explained</guid>
            <pubDate>Wed, 17 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Swift中的范围（Ranges）让你能够选择字符串、集合等部分内容。它们是Swift中对Objective-C的NSRange的变种，用法有所不同。了解更多请看这篇博文。]]></description>
            <content:encoded><![CDATA[<p>Swift 中的范围（Ranges）允许我们选择字符串、集合和其他类型的部分内容。它们是我们从 Objective-C 中熟悉的 NSRange 的 Swift 变体，尽管在使用上有所不同，我将在本篇博文中解释清楚。</p>
<p>通过使用范围运算符，范围使我们能够编写优雅的 Swift 代码。你第一次使用范围可能是因为你需要从字符串中选择一段字符，但是实际上你可以做的远不止这些！</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="swift-中的范围类型">Swift 中的范围类型<a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#swift-%E4%B8%AD%E7%9A%84%E8%8C%83%E5%9B%B4%E7%B1%BB%E5%9E%8B" class="hash-link" aria-label="Swift 中的范围类型的直接链接" title="Swift 中的范围类型的直接链接">​</a></h2>
<p>Swift 中有多种类型的范围可供我们使用。使用范围运算符是与它们交互的最简单方法。让我们来看看 Swift 中可用的不同类型。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="闭合范围运算符-ab">闭合范围运算符 a...b<a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#%E9%97%AD%E5%90%88%E8%8C%83%E5%9B%B4%E8%BF%90%E7%AE%97%E7%AC%A6-ab" class="hash-link" aria-label="闭合范围运算符 a...b的直接链接" title="闭合范围运算符 a...b的直接链接">​</a></h3>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">ClosedRange</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token operator">...</span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">first</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 10</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>使用 <code>a...b</code> 的闭合范围运算符定义了一个包含 a 和 b 的范围，其中 a 不能大于 b。</p>
<p>闭合范围运算符在你想要使用所有值的情况下非常有用。例如，如果你想迭代遍历一个集合的所有元素：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> index </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token number">0</span><span class="token operator">...</span><span class="token number">2</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Name </span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">index</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)"> is </span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">\(</span><span class="token string-literal interpolation">names</span><span class="token string-literal interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal interpolation">index</span><span class="token string-literal interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token string-literal interpolation-punctuation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 输出：</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Name 0 is Antoine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Name 1 is Maaike</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// Name 2 is Jaap</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>不过，要从集合中选择元素，需要使用 <code>CountableClosedRange</code> 类型：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">CountableClosedRange</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token operator">...</span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ["Antoine", "Maaike", "Jaap"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>当然，Swift 聪明到足够自动检测到可数范围的类型。因此，你可以这样写上面的代码：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ["Antoine", "Maaike", "Jaap"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="半开范围运算符-ab">半开范围运算符 <code>a..&lt;b</code><a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#%E5%8D%8A%E5%BC%80%E8%8C%83%E5%9B%B4%E8%BF%90%E7%AE%97%E7%AC%A6-ab" class="hash-link" aria-label="半开范围运算符-ab的直接链接" title="半开范围运算符-ab的直接链接">​</a></h3>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">swiftCopy code</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Range</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">first</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">last</span><span class="token operator">!</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 9</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>半开范围定义了从 a 到 b 的范围，但不包括 b。它被称为<em>半开</em>，因为它包含第一个值但不包含最后一个值。与闭合范围一样，a 的值不能大于 b。</p>
<p>半开范围运算符可用于迭代遍历从零开始的列表，如 Swift 中的数组和集合，其中你希望迭代遍历列表的长度但不包括最后一个元素。这与前面的代码示例相同，但现在我们可以利用</p>
<p><code>count</code> 属性：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ["Antoine", "Maaike", "Jaap"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复��制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如果我们使用闭合运算符做同样的操作，将会遇到以下错误：</p>
<blockquote>
<p>Fatal error: Array index is out of range</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="单侧范围运算符-a">单侧范围运算符 a...<a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#%E5%8D%95%E4%BE%A7%E8%8C%83%E5%9B%B4%E8%BF%90%E7%AE%97%E7%AC%A6-a" class="hash-link" aria-label="单侧范围运算符 a...的直接链接" title="单侧范围运算符 a...的直接链接">​</a></h3>
<p>单侧范围运算符只定义了范围的一侧界限，例如 <code>a...</code> 或 <code>...b</code>。单侧范围尽可能地在一个方向上延伸，例如，从数组的开头到索引 2，包括数组的所有元素：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ["Antoine", "Maaike", "Jaap"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>或者从索引 1 开始到数组的末尾的所有元素：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">1</span><span class="token operator">...</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ["Maaike", "Jaap"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>单侧范围可以用于迭代，但只有在与起始值 <code>a...</code> 一起使用时才能这样做。否则，循环的起始位置不明确。使用单侧范围进行迭代需要手动检查循环何时应该结束，否则它将无限继续下去。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> names </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Antoine"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Maaike"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Jaap"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> neededNames </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">var</span><span class="token plain"> collectedNames</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> index </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token number">0</span><span class="token operator">...</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">guard</span><span class="token plain"> collectedNames</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">count </span><span class="token operator">!=</span><span class="token plain"> neededNames </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    collectedNames</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">names</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">collectedNames</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// ["Antoine", "Maaike"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="在-swift-中将范围转换为-nsrange">在 Swift 中将范围转换为 NSRange<a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#%E5%9C%A8-swift-%E4%B8%AD%E5%B0%86%E8%8C%83%E5%9B%B4%E8%BD%AC%E6%8D%A2%E4%B8%BA-nsrange" class="hash-link" aria-label="在 Swift 中将范围转换为 NSRange的直接链接" title="在 Swift 中将范围转换为 NSRange的直接链接">​</a></h2>
<p>迟早你会遇到一个问题，即想要将 <code>Range</code> 转换为 <code>NSRange</code> 类型。例如，如果你正在使用 <code>NSAttributedString</code>，并想要将属性应用于特定的范围。在下面的示例中，我们想要将橙色应用于标题中的“Swift”：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> title </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"A Swift Blog"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range </span><span class="token operator">=</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">of</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Swift"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> attributedString </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">NSMutableAttributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">attributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setAttributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">NSAttributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">foregroundColor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">UIColor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">orange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 无法将类型为 'Range&lt;String.Index&gt;?' 的值转换为预期的参数类型 'NSRange'（即 '_NSRange'）</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>由于 <code>Range</code> 无法转换为 <code>NSRange</code>，我们遇到了以下错误：</p>
<blockquote>
<p>无法将类型 'Range?' 的值转换为预期的参数类型 'NSRange'（即 '_NSRange'）</p>
</blockquote>
<p>我们可以通过使用 <code>NSRange</code> 提供的方便的初始化器来解决这个问题，该初始化器接受一个 Swift <code>Range</code>：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> convertedRange </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">NSRange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>最终的代码如下所示：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> title </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"A Swift Blog"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range </span><span class="token operator">=</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">of</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Swift"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token operator">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> convertedRange </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">NSRange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> attributedString </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">NSMutableAttributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> title</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">attributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setAttributes</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token class-name">NSAttributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Key</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">foregroundColor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">UIColor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">orange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> convertedRange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">attributedString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// A {</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// }Swift{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">//     NSColor = "UIExtendedSRGBColorSpace 1 0.5 0 1";</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// } Blog{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="范围和字符串">范围和字符串<a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#%E8%8C%83%E5%9B%B4%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2" class="hash-link" aria-label="范围和字符串的直接链接" title="范围和字符串的直接链接">​</a></h2>
<p>字符串和范围有一些特殊之处。你可能知道，<code>String</code> 是字符的集合。然而，并非每个字符都具有相同的大小。我们可以通过使用包含表情符号的 <code>NSRange</code> 和 <code>NSString</code> 来演示这一点：</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> emojiText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NSString</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"🚀launcher"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">emojiText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">substring</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">with</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">NSRange</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">location</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 期望输出：🚀launch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 实际输出：🚀launc</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">// 缺少了 'h'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>如你所见，火箭表情符号的长度超过一个字符。因此，我们的子字符串没有返回预期的结果，缺少了 'h'。</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用-string-索引处理">使用 String 索引处理<a href="https://goswiftui.com/blog/2023/05/17/swift-ranges-explained#%E4%BD%BF%E7%94%A8-string-%E7%B4%A2%E5%BC%95%E5%A4%84%E7%90%86" class="hash-link" aria-label="使用 String 索引处理的直接链接" title="使用 String 索引处理的直接链接">​</a></h3>
<p>解决这个问题的方法是使用 <code>Range&lt;String.Index&gt;</code> 而不是 <code>Range&lt;Int&gt;</code>。<code>String.Index</code> 考虑了字符的实际大小。我们只能使用半开范围（<code>Range</code>）的形式，因为这是 <code>String</code> 下标所要求的。</p>
<div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> emojiText </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"🚀launcher"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> endIndex </span><span class="token operator">=</span><span class="token plain"> emojiText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">index</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">emojiText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">startIndex</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> offsetBy</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">Range</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token class-name">Index</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> emojiText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">startIndex</span><span class="token operator">..&lt;</span><span class="token plain">endIndex</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token function" style="color:rgb(80, 250, 123)">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">emojiText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// 🚀launch</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<blockquote>
<ul>
<li>原文(英文)：<a href="https://www.avanderlee.com/swift/ranges-explained/" target="_blank" rel="noopener noreferrer">https://www.avanderlee.com/swift/ranges-explained/</a></li>
</ul>
</blockquote>]]></content:encoded>
            <category>iOS</category>
            <category>Swift</category>
        </item>
    </channel>
</rss>