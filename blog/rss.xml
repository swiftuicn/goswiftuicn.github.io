<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Fucking SwiftUI Blog</title>
        <link>https://goswiftui.com/blog</link>
        <description>Fucking SwiftUI Blog</description>
        <lastBuildDate>Thu, 08 Sep 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[ASO 排名优化技巧方法分析和经验总结]]></title>
            <link>https://goswiftui.com/blog/aso-tips-and-tricks-to-increase-your-apps-ranking</link>
            <guid>aso-tips-and-tricks-to-increase-your-apps-ranking</guid>
            <pubDate>Thu, 08 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[通过 ASO 优化应用在 App Store 上的排行，增加下载量并通过您的应用赚取更多收入。]]></description>
            <content:encoded><![CDATA[<p>今年我花了很多时间学习 App Store Optimalisation (ASO)，并设法让我的应用程序 <a href="https://dailytimetracking.com/" target="_blank" rel="noopener noreferrer">Daily</a>，一个 macOS 的时间跟踪器，在许多国家/地区以其最重要的关键字排名第一。您希望自己的应用也在 App Store 提升排名吗？这篇文章会介绍我的一些分析和经验总结。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="关键词">关键词<a class="hash-link" href="#关键词" title="标题的直接链接">​</a></h2><ul><li><a href="https://appfigures.com/resources/guides/which-keywords-to-optimize-for" target="_blank" rel="noopener noreferrer">通过研究</a>选择正确的关键字。一般来说，使用竞争低的流行（但相关）关键字。</li><li>分析您的竞争对手以制定（关键字）策略。他们做错了什么（例如关键字重复、关键字定位、缺少关键字、缺乏焦点等）？你怎么能做得更好？</li><li>应用名称中的关键字权重最高，其次是副标题和关键字字段。因此，将主要关键字放在应用程序名称中。</li><li>关键字密度很重要。权重分布在使用的（关键）词上。要么通过使用更少的关键字来集中注意力，要么通过使用更多的关键字来增加覆盖面。最佳策略（一如既往）取决于您的竞争对手。</li><li>关键字的位置确实很重要。开头的关键词权重最大。因此，尽可能将主要关键字放在开头。</li><li>关键字的顺序很重要。例如，名为“Timesheet: Time Tracking”的应用程序在“时间跟踪”上的排名将优于“跟踪时间”。</li><li>应避免重复关键字。只有最后一次出现（在应用程序名称、副标题和关键字字段的组合中）被认为意味着它的权重会减少。</li><li>（简单）复数形式（例如<em>blogs</em>的<em>blog</em>）是自动完成的，所以只包括单数形式。另外，请注意（简单）复数被认为是重复。</li><li>避免使用不相关的关键字（例如<em>app</em>）或副本（例如<em>&amp; more</em>），因为它们会影响您的主要关键字。它们通常不会在转换中发挥作用，但会损害可发现性。</li><li>删除关键字字段中关键字之间的空格（用逗号分隔），以最佳地利用字符限制。</li><li><a href="https://appfigures.com/resources/guides/extend-keyword-list" target="_blank" rel="noopener noreferrer">通过添加其他语言</a>将关键字字段的字符限制增加一倍（甚至三倍） ，即使您的应用程序（商店页面）不包含这些语言的翻译。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="评分">评分<a class="hash-link" href="#评分" title="标题的直接链接">​</a></h2><ul><li>（非常棒）评分不仅有助于说服用户下载您的应用，而且在确定您的应用排名方面也发挥着重要作用。</li><li>（平均）评分、评分数量和评分趋势都被考虑在内。确保他们是积极的。</li><li>要求用户对您的应用程序进行评分，但前提是他们可能对它感到满意（例如，基于使用情况）。对于您发布的每个版本，再次询问他们。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="下载量">下载量<a class="hash-link" href="#下载量" title="标题的直接链接">​</a></h2><ul><li>（最近的）下载次数及其趋势也决定了您的应用程序的排名。当算法无法仅根据关键字和评级正确排名时尤其如此。</li><li>增加下载量就像一个 ASO 飞轮：它会提高排名，从而带来更多的下载量。如果做得好，它也会导致更多的（正面）评级。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="上架时间">上架时间<a class="hash-link" href="#上架时间" title="标题的直接链接">​</a></h2><ul><li>上架时间较早的应用程序似乎排名略高，尤其是当算法无法仅根据关键字、排名和下载次数进行排名时。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类别">类别<a class="hash-link" href="#类别" title="标题的直接链接">​</a></h2><ul><li>一些关键字与某些类别相关联。例如在<em>教育中**学习</em>。在这些情况下，处于正确的类别可以提高排名。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="应用内购买">应用内购买<a class="hash-link" href="#应用内购买" title="标题的直接链接">​</a></h2><ul><li>推广应用内购买似乎略微提升了排名。由于它没有伤害并且可以有所作为，因此请考虑推广一个或多个。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="更新">更新<a class="hash-link" href="#更新" title="标题的直接链接">​</a></h2><ul><li>经常更新的应用排名更高。</li></ul><blockquote><ul><li>原文(英文)：<a href="https://blog.nielsmouthaan.nl/aso-tips-and-tricks-to-increase-your-apps-ranking" target="_blank" rel="noopener noreferrer">https://blog.nielsmouthaan.nl/aso-tips-and-tricks-to-increase-your-apps-ranking</a></li></ul></blockquote>]]></content:encoded>
            <category>marketing</category>
            <category>iOS</category>
            <category>ASO</category>
            <category>App Store</category>
        </item>
        <item>
            <title><![CDATA[SwiftUI 中实现共享跨平台(iOS/macOS)代码]]></title>
            <link>https://goswiftui.com/blog/sharing-code-in-swiftui-apps</link>
            <guid>sharing-code-in-swiftui-apps</guid>
            <pubDate>Sat, 03 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[在 SwiftUI 中构建应用程序的主要吸引力在于能够跨平台(iOS/macOS)共享 UI 代码。]]></description>
            <content:encoded><![CDATA[<p><a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noopener noreferrer">在SwiftUI</a>中构建应用程序的主要吸引力在于能够跨平台共享 UI 代码，尤其是 iOS 和 macOS。它并不完美，您经常需要进行一些<code>#if os()</code>检查，但是当它起作用时，它确实很棒。在 SwiftUI 出现之前，您已经可以在 iOS 和 macOS 之间共享大量（非 UI）代码。许多系统框架在两个平台上都可用，例如<a href="https://developer.apple.com/documentation/foundation" target="_blank" rel="noopener noreferrer">Foundation</a>和<a href="https://developer.apple.com/documentation/coredata" target="_blank" rel="noopener noreferrer">Core Data</a>。偶尔会存在 API 差异，但它们很少会带来很大的负担。</p><p>在开发跨平台 SwiftUI 应用程序时，最大的问题是当您需要在 macOS上使用<a href="https://developer.apple.com/documentation/appkit" target="_blank" rel="noopener noreferrer">AppKit</a>和在 iOS上使用<a href="https://developer.apple.com/documentation/uikit" target="_blank" rel="noopener noreferrer">UIKit时。</a>通常，您需要的 API（因为 SwiftUI 中没有它们）完全不同。但是，有时 API<em>几乎相同</em>，但<em>只是不同，以至于</em>需要分支到特定于平台的代码路径。一个很好的例子是<a href="https://developer.apple.com/documentation/uikit/uipasteboard" target="_blank" rel="noopener noreferrer"><code>UIPasteboard</code></a>在 iOS 和<a href="https://developer.apple.com/documentation/appkit/nspasteboard" target="_blank" rel="noopener noreferrer"><code>NSPasteboard</code></a>macOS 上。</p><p>在我正在开发的这个跨平台 SwiftUI 应用程序中，我希望允许用户从表格视图中复制一些文本。两个平台共享 UI 代码，但不共享底层复制功能——因为我们需要在 macOS 上使用 AppKit，在 iOS 上使用 UIKit。但我想保持调用站点的复制操作代码干净，无需进行大量<code>#if os()</code>检查。为此，您可以巧妙地使用<code>typealias</code>.</p><p>首先，我们在两个平台上定义一个公用的 <code>typealias</code> 。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token directive property directive-name">#if</span><span class="token directive property"> os</span><span class="token directive property punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token directive property">macOS</span><span class="token directive property punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">AppKit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typealias</span><span class="token plain"> </span><span class="token class-name">XPasteboard</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">NSPasteboard</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token directive property directive-name">#else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> </span><span class="token class-name">UIKit</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">typealias</span><span class="token plain"> </span><span class="token class-name">XPasteboard</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token class-name">UIPasteboard</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token directive property directive-name">#endif</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>然后我们可以写一个扩展<code>XPasteboard</code>来封装通用功能。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">XPasteboard</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">copyText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token omit keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token directive property directive-name">#if</span><span class="token directive property"> os</span><span class="token directive property punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token directive property">macOS</span><span class="token directive property punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">clearContents</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">setString</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> forType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">string</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token directive property directive-name">#else</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">string </span><span class="token operator">=</span><span class="token plain"> text</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token directive property directive-name">#endif</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>我们现在有一个单一的“跨平台”API 可供使用，我喜欢这样使代码更简洁。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token class-name">XPasteboard</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">general</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">copyText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">someText</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这只是一个小例子，说明如何解决 AppKit 和 UIKit 中的差异以生成更好的代码，但是当您在两个框架中遇到相似但不同的 API 时，还有很多其他改进的机会。随着您的 SwiftUI 应用程序变得越来越复杂，您将越来越需要 AppKit 和 UIKit。这是我喜欢用来封装一些复杂性的一种策略。</p><blockquote><ul><li>原文(英文)：<a href="https://www.jessesquires.com/blog/2022/08/19/sharing-code-in-swiftui-apps" target="_blank" rel="noopener noreferrer">https://www.jessesquires.com/blog/2022/08/19/sharing-code-in-swiftui-apps</a></li></ul></blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>iOS</category>
            <category>macOS</category>
            <category>UIKit</category>
        </item>
        <item>
            <title><![CDATA[如何在 Combine 框架中使用 Swift 中 async/await 函数]]></title>
            <link>https://goswiftui.com/blog/bridge-async-await-to-combine-future</link>
            <guid>bridge-async-await-to-combine-future</guid>
            <pubDate>Sun, 28 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[在 Swift 中处理异步代码时，我们可能必须找到组合实现不同异步模式的方法，例如将 Combine 框架与 Swift 的 async/await API 一起使用。]]></description>
            <content:encoded><![CDATA[<blockquote><p>了解如何在基于组合的 API 中调用 async/await 代码</p></blockquote><p>在 Swift 中处理异步代码时，我们可能必须找到组合实现不同异步模式的方法，例如将 Combine 框架与 Swift 的 async/await API 一起使用。</p><p>在本文中，我们将了解如何在 <code>Combine</code> API 中调用带有 <code>async</code> 标记的函数。</p><p>让我们看看下面的异步函数，它使用 <code>async/await</code> 模式从服务器加载用户。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">loadUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">throws</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)">// Load user from server</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> user </span><span class="token comment" style="color:rgb(98, 114, 164)">// or throw error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>要使用 <code>Combine</code> 实现相同的行为，它的 <code>Future</code> 发布者就派上用场了。未来使用带有 <code>Future.Promise</code> 的闭包进行初始化。在完成一些异步工作之后，我们用一个成功或失败的 Result 调用该闭包。然后，Combine 会自动将结果映射到适当的发布者事件中。</p><p>让我们看看如何使用 <code>Future</code> 发布者实现上面的 <code>async</code> 函数：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">loadUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token class-name">User</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> promise </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)">// Load user from server.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">success</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// or promise(.failure(error))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>但是由于我们已经有一个加载用户的实现，我们希望避免重复编写相同的逻辑。</p><p>因此，让我们尝试找到一个更通用的解决方法，它允许我们将 async func 转换为<code>Future</code>发布者。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">where</span><span class="token plain"> </span><span class="token class-name">Failure</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">convenience</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">asyncFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token attribute atrule">@escaping</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">throws</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">init</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> promise </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">do</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">asyncFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">success</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">result</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">failure</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在上面的代码中，我们在初始化中扩展了 <code>Future</code> 类型，它允许我们用一个异步闭包来初始化一个实例。应用于我们的示例：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(80, 250, 123)">loadUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token class-name">Error</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">asyncFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">loadUser</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>对于异常的情况，我们可以添加另一个扩展：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">extension</span><span class="token plain"> </span><span class="token class-name">Future</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">where</span><span class="token plain"> </span><span class="token class-name">Failure</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token class-name">Never</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">convenience</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">init</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">asyncFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token attribute atrule">@escaping</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">async</span><span class="token plain"> </span><span class="token operator">-&gt;</span><span class="token plain"> </span><span class="token class-name">Output</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">self</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">init</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"> promise </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token class-name">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">let</span><span class="token plain"> result </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">asyncFunc</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token function" style="color:rgb(80, 250, 123)">promise</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">success</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">result</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>有了像这样的通用解决方案，我们现在可以在任何 <code>async</code> 函数上使用它来将其桥接到 Combine 的 Future。</p><blockquote><ul><li>原文(英文)：<a href="https://tanaschita.com/20220822-bridge-async-await-to-combine-future" target="_blank" rel="noopener noreferrer">https://tanaschita.com/20220822-bridge-async-await-to-combine-future</a></li></ul></blockquote>]]></content:encoded>
            <category>combine</category>
            <category>async/await</category>
            <category>swift</category>
        </item>
        <item>
            <title><![CDATA[SwiftUI 中使用 TextField 实现多行文本效果]]></title>
            <link>https://goswiftui.com/blog/Finally-Multiline-TextField-in-SwiftUI</link>
            <guid>Finally-Multiline-TextField-in-SwiftUI</guid>
            <pubDate>Sat, 27 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[我有多少次尝试在 Stackoverflow 上找到答案，嗯？不再使用自定义多行文本字段TextEditor。从iOS 16 开始，我们可以使用TextField来实现它，只需添加一个新参数axis：]]></description>
            <content:encoded><![CDATA[<p>我有多少次尝试在 Stackoverflow 上找到<a href="https://stackoverflow.com/search?q=multiline+TextField+SwiftUI" target="_blank" rel="noopener noreferrer">答案</a>，嗯？不再使用自定义多行文本字段<code>TextEditor</code>。从<strong>iOS 16 开始，我们可以使用</strong><a href="https://developer.apple.com/documentation/swiftui/textfield" target="_blank" rel="noopener noreferrer">TextField</a>来实现它，只需添加一个新参数<code>axis</code>：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Multiline textfield"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> axis</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">vertical</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当文本大于文本字段边界时，此参数控制滚动方向。使用该<code>vertical</code>值，我们得到一个新的现代多行文本字段，但通过指定<code>horizontal</code>一个我们返回到我们都已经习惯的行为。</p><p><img loading="lazy" src="https://otbivnoe.ru/assets/img/articles/multiline-textfield/multiline-textfield-1.gif" class="img_ev3q"></p><p>看看它工作得有多顺畅。这个文本字段现在不仅是多行的，而且它会在内容更改时自动扩展和收缩。如果无限扩展的内容不是您期望看到的，那么旧<code>lineLimit</code>的和新的得心应手的朋友就是救命稻草！</p><p>使用此修饰符，文本字段会增长，直到超过限制的行数。有几种方法可以指定您需要多少<strong>可见</strong>文本行。使用<a href="https://developer.apple.com/documentation/swiftui/defaultdateprogresslabel/linelimit(_:)-3c4c9" target="_blank" rel="noopener noreferrer">旧版本，</a>您只需配置文本在此视图中可以占据的最大行数。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// iOS 13+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Multiline textfield"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> axis</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">vertical</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">lineLimit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>从<strong>iOS 16</strong>开始，还有一些配置最小和最大行数。</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token comment" style="color:rgb(98, 114, 164)">// iOS 16+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Multiline textfield"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> axis</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">vertical</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">lineLimit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// It's identical to usual `lineLimit(2)`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">lineLimit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token operator">...</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// min=2, max=Int.max</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Multiline textfield"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> axis</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">vertical</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">lineLimit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token operator">...</span><span class="token number">3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// min=2, max=3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Multiline textfield"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> axis</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">vertical</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">lineLimit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> reservesSpace</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token boolean">true</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)">// = `lineLimit(2...2)`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">lineLimit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> reservesSpace</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token boolean">false</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">// = `lineLimit(2)`</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><ul><li>原文(英文)：<a href="https://otbivnoe.ru/2022/07/10/Finally-Multiline-TextField-in-SwiftUI.html" target="_blank" rel="noopener noreferrer">https://otbivnoe.ru/2022/07/10/Finally-Multiline-TextField-in-SwiftUI.html</a></li></ul></blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>TextField</category>
            <category>iOS</category>
        </item>
        <item>
            <title><![CDATA[如何在 App Store 上获得推荐]]></title>
            <link>https://goswiftui.com/blog/how-to-get-featured-on-the-app-store</link>
            <guid>how-to-get-featured-on-the-app-store</guid>
            <pubDate>Sat, 27 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[多次获得在 App Store 推荐的开发人员的方法]]></description>
            <content:encoded><![CDATA[<blockquote><p>多次获得在 App Store 推荐的开发人员的方法</p></blockquote><p>在 App Store 中获得推荐是一笔不错的交易。但是您知道<strong>您可以要求 Apple 展示您的应用吗？</strong>每个 App Store 开发者都可以申请功能。您需要做的就是在 Apple Developer 网站上填写<a href="https://developer.apple.com/contact/app-store/promote/" target="_blank" rel="noopener noreferrer">专门的表格。</a></p><p>由于我还没有使用表单的经验，所以我决定与其他开发者聊天，希望能启发更多的独立开发者，也许是为了关注这种表单并在 App Store 上获得良好的曝光率。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="经常提交以获得最佳结果">经常提交以获得最佳结果<a class="hash-link" href="#经常提交以获得最佳结果" title="标题的直接链接">​</a></h2><p>如果有一个大收获，那就是<strong>经常提交此表格是有意义的</strong>。理想情况下，对于每个重要的应用程序更新。正如<a href="https://twitter.com/emcro" target="_blank" rel="noopener noreferrer">Emmanuel Crouvisier</a>（ CardPointers 的开发者<a href="https://cardpointers.com/" target="_blank" rel="noopener noreferrer">）</a>所建议的：</p><blockquote><p>我每年多次提交该表格，并且很幸运能够连续 3 年在每个大型 iOS 版本中至少出现一个功能列表。</p></blockquote><p><a href="https://twitter.com/wessley" target="_blank" rel="noopener noreferrer">Wessley Roche</a> ——Everlog 背后的开发者<a href="https://everlog.app/" target="_blank" rel="noopener noreferrer">——</a>推荐了同样的方法：</p><blockquote><p>在几个欧盟国家/地区多次被评为“每日应用”。我为每次重大更新提交该表格。</p></blockquote><p>虽然您通常不会从 Apple 获得确认您提交的内容是 App Store 功能的原因，但这似乎很有可能。我不认为 App Store 编辑团队试图独立寻找应用程序。也许他们在已经很流行的应用程序的情况下这样做。</p><p>如果您需要更多确认才能经常提交，这里是<a href="https://structured.app/" target="_blank" rel="noopener noreferrer">Structured</a>背后的创建者<a href="https://twitter.com/leoMehlig" target="_blank" rel="noopener noreferrer">Leo Mehlig</a>：</p><blockquote><p>我提交了很多次，后来被推荐了。但目前尚不清楚这是否与表格有关。</p></blockquote><p>似乎连 Apple 都建议频繁提交，Leo 再次：</p><blockquote><p>实验室里有人告诉我，基本上每次小的功能更新都要提交它。</p></blockquote><p>如果您想最大限度地提高您的机会，那么除了经常提交之外，您还应该在接近新的 iOS 版本时提交 - 假设您将使用新的 iOS 功能更新您的应用程序或正在构建一个全新的应用程序。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="提交表格">提交表格<a class="hash-link" href="#提交表格" title="标题的直接链接">​</a></h2><p>虽然与我交谈过的所有开发人员都同意经常提交，<!-- -->*<!-- -->但<!-- -->*<!-- -->似乎每个人都有自己填写表格的方法。<!-- -->*<!-- -->*<!-- --> 例如，Emmanuel 确保利用可选的“链接”部分分享一个专门的页面，展示 CardPointers 将提供的所有新功能，以及为此目的在 Instagram 和 TestFlight 链接上托管的“病毒视频”。</p><p>另一方面，Leo &amp; Wessley 不使用“链接”部分，而是专注于表单的其他部分。<strong>他们主要详细介绍了他们的应用程序将在即将到来的更新中获得哪些新功能以及他们已经提供了什么</strong>。两位开发人员都非常友善，并详细展示了他们提交的作品通常的样子。</p><p>Wessley 倾向于提交简明扼要的答案，重点强调要点列表，以介绍新功能并描述现有功能。另一方面，Leo 写的答案更长，几乎达到了几个答案的 1000 个字符的限制。</p><p>对我来说，这里的要点是不要太强调格式，<strong>而是确保提供必要的信息。</strong></p><p>尽管 Apple 建议在新应用发布或更新前三周或更长时间提交表单，但按更紧凑的时间表提交似乎不会破坏交易。如果您仍然尝试尽可能提前提交，那将是最好的，但当您没有时间时不要气馁。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="准备宣传图片">准备宣传图片<a class="hash-link" href="#准备宣传图片" title="标题的直接链接">​</a></h2><p>如果您有幸被选中参加更突出的促销活动，<strong>Apple 会回复您并要求将促销图片</strong>包含在该功能中。这些需要以 PSD 格式提交（Photoshop 使用，但其他编辑器也可以将其导出）。您应该有 5 到 7 天的时间将图形提供给 Apple。</p><p>您可以自己创建这些，这取决于您使用 Photoshop 或其他图形软件的舒适程度。浏览当前的 App Store 功能可以作为一种灵感。</p><p>与我交谈的开发人员通常会提交多种设计供 Apple 选择。Wessley 自己创建了图形，而 Leo 在自己创建了第一个宣传材料后转投自由设计师。</p><p>Emmanuel 邀请了你可能在 Twitter 上认识的设计师 Matthew Skiles，他<a href="https://twitter.com/matthewskiles" target="_blank" rel="noopener noreferrer">在 Twitter 上</a>分享了他为开发人员创建的很棒的应用程序图标。</p><blockquote><ul><li>原文(英文)：<a href="https://nemecek.be/blog/169/how-to-get-featured-on-the-app-store" target="_blank" rel="noopener noreferrer">https://nemecek.be/blog/169/how-to-get-featured-on-the-app-store</a></li></ul></blockquote>]]></content:encoded>
            <category>App Store</category>
            <category>推荐</category>
            <category>iOS</category>
        </item>
        <item>
            <title><![CDATA[使用 SwiftUI/UIKit 实现 iOS 应用密码自动填充]]></title>
            <link>https://goswiftui.com/blog/supporting-password-autofill-for-ios-appilcations</link>
            <guid>supporting-password-autofill-for-ios-appilcations</guid>
            <pubDate>Tue, 23 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[了解如何在 SwiftUI 和 UIKit 实现 Apple 的密码自动填充。]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="了解如何在-swiftui-和-uikit-实现-apple-的密码自动填充">了解如何在 SwiftUI 和 UIKit 实现 Apple 的密码自动填充。<a class="hash-link" href="#了解如何在-swiftui-和-uikit-实现-apple-的密码自动填充" title="标题的直接链接">​</a></h2><p>Apple 的密码自动填充功能允许用户在不同设备上登录同一个帐户，而无需记住他们的凭据。</p><p>例如，在 Web 应用程序中注册时，用户可以生成密码并将凭据保存在他们的 iCloud 钥匙串中。当他们在某个时候运行本机应用程序以访问同一帐户时，该应用程序会在密码 QuickType 栏中建议为网站存储的凭据。在用户进行身份验证后，假设使用 Face ID，系统会预先填写凭据 - 因此无需重新输入它们。</p><p>要在 iOS 应用程序中激活密码自动填充功能，需要执行以下步骤：</p><ol><li>设置应用程序的关联域。</li><li>在相关文本字段上设置正确的自动填充类型。</li></ol><p>让我们更详细地看一下这些步骤。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="为共享-web-凭据设置应用的关联域">为共享 Web 凭据设置应用的关联域<a class="hash-link" href="#为共享-web-凭据设置应用的关联域" title="标题的直接链接">​</a></h3><p>关联域在网站和 iOS 应用程序之间建立安全关联。要支持共享 Web 凭据，需要执行以下步骤：</p><ol><li>为共享的 Web 凭据创建和配置关联的域文件。</li><li>将关联的域文件添加到相关网站。</li><li>将关联的域权利添加到 iOS 应用程序。</li></ol><p>这些步骤中的每一个都在<a href="https://tanaschita.com/20220725-quick-guide-on-associated-domains-in-ios" target="_blank" rel="noopener noreferrer">有关相关域文件</a>的这篇文章中进行了更详细的描述。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="使用-textcontenttype-启用密码自动填充">使用 textContentType 启用密码自动填充<a class="hash-link" href="#使用-textcontenttype-启用密码自动填充" title="标题的直接链接">​</a></h3><p>设置共享网络凭据后，我们需要做的就是在任何相关输入视图上设置 textContentType 属性以激活正确的自动填充建议。</p><p>以下 UITextContentType 值可用：</p><ul><li>.username 用于帐户名称</li><li>.password 密码</li><li>.newPassword 用于新密码</li><li>.oneTimeCode 用于一次性密码，例如自动完成单因素短信登录流程中的安全代码</li></ul><p>让我们看看如何为 SwiftUI 和 UIKit 应用程序做到这一点。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="为-swiftui-启用密码自动填充">为 SwiftUI 启用密码自动填充<a class="hash-link" href="#为-swiftui-启用密码自动填充" title="标题的直接链接">​</a></h4><p>在 SwiftUI 中，我们可以使用 textContentType(<!-- -->_<!-- -->:)方法设置 UITextContentType 值：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Enter your email"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $emailAddress</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">textContentType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">username</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">keyboardType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">emailAddress</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token class-name">TextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-literal string" style="color:rgb(255, 121, 198)">"Enter your password"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> text</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> $password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">textContentType</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">password</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>根据我们提供的 textContentType，iOS 会自动选择一个匹配的键盘来显示给用户。</p><p>要呈现不同的键盘，例如，如果应用程序使用电子邮件作为用户名，我们可以另外将.keyboardType 设置为所需的值。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="为-uikit-启用密码自动填充">为 UIKit 启用密码自动填充<a class="hash-link" href="#为-uikit-启用密码自动填充" title="标题的直接链接">​</a></h4><p>UIKit 支持 UITextField、UITextView 和任何采用 UITextInput 协议的自定义视图上的密码自动填充。我们可以使用 textContentType 实例属性设置 UITextContentType 值：</p><div class="language-swift codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-swift codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">userTextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">textContentType </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">username</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">userTextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">keyboardType </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">emailAddress</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">passwordTextField</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">textContentType </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">password</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>原文(英文)：<a href="https://tanaschita.com/20220815-supporting-password-autofill-for-ios-appilcations" target="_blank" rel="noopener noreferrer">https://tanaschita.com/20220815-supporting-password-autofill-for-ios-appilcations</a></p></blockquote>]]></content:encoded>
            <category>SwiftUI</category>
            <category>密码</category>
            <category>UIKit</category>
            <category>iOS</category>
        </item>
        <item>
            <title><![CDATA[AppStore 购买成功后退款，苹果是否会保留佣金？]]></title>
            <link>https://goswiftui.com/blog/does-apple-keep-its-commission</link>
            <guid>does-apple-keep-its-commission</guid>
            <pubDate>Mon, 22 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[AppStore 购买成功后退款，苹果是否会保留佣金？]]></description>
            <content:encoded><![CDATA[<p>这里有一个有趣的问题，似乎定期重新出现，但没有明确的答案：在用户获得应用程序内购买退款后，苹果的佣金会发生什么？</p><p>根据<a href="https://developer.apple.com/support/downloads/terms/schedules/Schedule-2-and-3-20220225-English.pdf" target="_blank" rel="noopener noreferrer">付费应用程序协议</a>，如果应用程序内购买退款，所有 iOS 开发人员必须同意以下政策：</p><p><strong>“Apple 将有权保留其销售该许可应用程序的佣金，尽管已将价格退还给最终用户。”</strong></p><p>多年来，网络上有很多关于这个问题的闲聊，从 Reddit 和 Hacker News 到 Stack Overflow 和苹果开发人员论坛。这是有道理的，因为从表面上看，这项政策听起来很可怕。如果 Apple 保留 30% 的购买项目，并随后退款，开发者可能会损失很多钱。</p><p>例如，假设您拥有一个健身应用程序，并且您的一个用户为您的 100 美元年度计划购买了订阅。你付给苹果 30 美元，可以保留 70 美元。但是，如果用户为他们的购买退款，他们将获得 100 美元的退款，如果苹果有权保留 30%的佣金，您将获得 30 美元。可以理解，这让许多开发人员感到担忧。</p><p>由于围绕这个话题的不确定性，我决定通过从我的 App Store Connect 帐户中提取详细的付款报告来测试它：</p><p><img loading="lazy" alt="img" src="/assets/images/Screen-Shot-2022-08-16-at-11.59.49-AM-c2d85381d549691752efa75db2857dfb.webp" width="1024" height="164" class="img_ev3q"></p><p>如您所见，苹果在向用户发放退款时扣除了佣金<em>后</em>价格（标有“扩展合作伙伴份额”的列）。因此，苹果没有保留其 30%的佣金，我也没有损失任何钱。</p><p>底线？苹果<em>保留</em>保留佣金金额的权利，但这并不意味着<em>会的</em>。我怀疑 Apple 在欺诈或其他情有可原情况的条款和条件中包含此内容。</p><p>所以，你拥有它！</p><p>虽然从技术上讲，即使在购买退款后，苹果也有权保留其佣金，但我还没有听到任何确诊案例。只要您合法和专业地运营您的应用程序业务，您就不应该有任何可担心的事情。</p><blockquote><p>原文(英文)：<a href="https://www.revenuecat.com/blog/does-apple-keep-its-commission/" target="_blank" rel="noopener noreferrer">https://www.revenuecat.com/blog/does-apple-keep-its-commission/</a></p></blockquote>]]></content:encoded>
            <category>AppStore</category>
            <category>退款</category>
            <category>佣金</category>
            <category>iOS</category>
        </item>
    </channel>
</rss>